ROSTemplateFormatVersion: '2015-09-01'
Description:
  en: 新建ack部署nginx
  zh-cn: new ack deploy nginx
# 定义参数
Parameters:
  # 付费类型
  PayType:
    Type: String
    Label:
      en: ECS Instance Charge Type
      zh-cn: 付费类型
    Default: PostPaid
    AllowedValues:
      # 按量
      - PostPaid
      # 包年包月
      - PrePaid
    AssociationPropertyMetadata:
      LocaleKey: InstanceChargeType
    # 如果是包年包月 周期单位
    PayPeriodUnit:
      Type: String
      Label:
        en: Pay Period Unit
        zh-cn: 购买资源时长周期
      Default: Month
      AllowedValues:
        - Month
        - Year
      AssociationPropertyMetadata:
        Visible:
          Condition:
            Fn::Not:
              Fn::Equals:
                - ${PayType}
                - PostPaid
    # 如果是包年包月 周期
    PayPeriod:
      Type: Number
      Description:
        en: When the purchasing Period is Week, the value of Period ranges from 1 to 4. <br> When the resource purchase duration is Month, the value of Period ranges from 1 to 9, 12, 24, 36, 48, or 60. <br><b><font color='red'> When ECS instance types are PrePaid valid </b></font>
        zh-cn: 当购买资源时长为Week时，Period取值：1~4。<br>当购买资源时长为Month时，Period取值：1~9 <br><b><font color='red'>当ECS实例类型为PrePaid有效</b></font>
      Label:
        en: Period
        zh-cn: 购买资源时长
      Default: 1
      AllowedValues:
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
      AssociationPropertyMetadata:
        Visible:
          Condition:
            Fn::Or:
              - Fn::Equals:
                  - ${PayType}
                  - PrePaid
              - Fn::Equals:
                  - ${PayType}
                  - undefined
  # 可用区
  ZoneId:
    Type: String
    AssociationProperty: ALIYUN::ECS::Instance:ZoneId
    Label:
      en: Zone ID
      zh-cn: 可用区
  # 新建ack所在的vpc的网段
  VpcCidrBlock:
    Type: String
    Label:
      en: VPC CIDR IPv4 Block
      zh-cn: 专有网络IPv4网段
    Description:
      zh-cn: VPC的ip地址段范围，<br>您可以使用以下的ip地址段或其子网:<br><font color='green'>[10.0.0.0/8]</font><br><font color='green'>[172.16.0.0/12]</font><br><font color='green'>[192.168.0.0/16]</font>
      en: 'The ip address range of the VPC in the CidrBlock form; <br>You can use the following ip address ranges and their subnets: <br><font color=''green''>[10.0.0.0/8]</font><br><font color=''green''>[172.16.0.0/12]</font><br><font color=''green''>[192.168.0.0/16]</font>'
    Default: 192.168.0.0/16
    AssociationProperty: ALIYUN::VPC::VPC::CidrBlock
  # 新建ack所在的交换机的网段
  VSwitchCidrBlock:
    Type: String
    Label:
      en: VSwitch CIDR Block
      zh-cn: 交换机子网网段
    Description:
      zh-cn: 必须属于VPC的子网段。
      en: Must belong to the subnet segment of VPC.
    Default: 192.168.1.0/24
    AssociationProperty: ALIYUN::VPC::VSwitch::CidrBlock
    AssociationPropertyMetadata:
      VpcCidrBlock: VpcCidrBlock
  # 定义ack和ecs对应的登录密码
  LoginPassword:
    NoEcho: true
    Type: String
    Description:
      en: 'Length 8-32 characters, can contain size letters, Numbers and special symbols, including:! @ # $ % ^ & * ( ) _ + - ='
      zh-cn: 长度8-32个字符,可包含大小字母、数字及特殊符号（包含：!@#$%^&*()_+-=）
    Label:
      en: Instance Password
      zh-cn: 实例密码
    AssociationProperty: ALIYUN::ECS::Instance::Password
    ConstraintDescription:
      en: '8-32 characters, can contain size letters, Numbers and special symbols, including:! @ # $ % ^ & * ( ) _ + - ='
      zh-cn: 8-32个字符,可包含大小字母、数字及特殊符号（包含：!@#$%^&*()_+-=）
    MinLength: 8
    MaxLength: 32
  # ack worker的实例类型
  WorkerInstanceType:
    Type: String
    Label:
      en: Worker Nodes Types
      zh-cn: Worker节点规格
    AssociationProperty: ALIYUN::ECS::Instance::InstanceType
    Default: ecs.g6.large
  WorkerSystemDiskCategory:
    Type: String
    # ack worker的磁盘类型
    AllowedValues:
      - cloud_efficiency
      - cloud_ssd
      - cloud_essd
    AssociationPropertyMetadata:
      LocaleKey: DiskCategory
      InstanceType: ${WorkerInstanceType}
    Label:
      en: Worker System Disk Category
      zh-cn: Worker 系统盘磁盘类型
    Default: cloud_essd
  # ack worker的系统盘大小
  WorkerSystemDiskSize:
    Type: Number
    Label:
      en: Worker System Disk Size(GB)
      zh-cn: Worker节点系统盘大小(GB)
    MinValue: 1
    Default: 120
  EcsInstanceType:
    Type: String
    Label:
      en: Instance Type
      zh-cn: 跳板机实例类型
    AssociationProperty: ALIYUN::ECS::Instance::InstanceType
    Default: ecs.g6.large
  SystemDiskCategory:
    Type: String
    AllowedValues:
      - cloud_efficiency
      - cloud_ssd
      - cloud_essd
    Label:
      en: System Disk Category
      zh-cn: 系统盘类型
    AssociationProperty: ALIYUN::ECS::Disk::SystemDiskCategory
    AssociationPropertyMetadata:
      LocaleKey: DiskCategory
      InstanceType: ${EcsInstanceType}
    Default: cloud_essd
  SystemDiskSize:
    Default: 40
    Type: Number
    Label:
      zh-cn: 系统盘空间 (GB)
      en: System Disk Space (GB)
  LoadBalancerSpec:
    Type: String
    AssociationProperty: ALIYUN::SLB::Instance::InstanceType
    Label:
      en: Specifications
      zh-cn: 规格
    Default: slb.s1.small
Metadata:
  ALIYUN::ROS::Interface:
    # 定义参数分组
    ParameterGroups:
      - Parameters:
          - PayType
          - PayPeriodUnit
          - PayPeriod
        Label:
          default:
            en: PayType Configuration
            zh-cn: 付费类型配置
      - Parameters:
          - ZoneId
          - VpcCidrBlock
          - VSwitchCidrBlock
          - LoginPassword
        Label:
          en: Basic Configuration
          zh-cn: 基础配置
      - Parameters:
          - WorkerInstanceType
          - WorkerSystemDiskCategory
          - WorkerSystemDiskSize
        Label:
          en: Kubernetes配置
          zh-cn: KUBERNETES
      - Parameters:
          - EcsInstanceType
          - SystemDiskSize
          - SystemDiskCategory
        Label:
          en: ECS跳板机配置
          zh-cn: ECS跳板机配置
      - Parameters:
          - LoadBalancerSpec
        Label:
          en: 负载均衡配置
          zh-cn: 负载均衡配置
# 定义输出
Outputs:
  # 将公网ip做为http返回的地址显示在控制台
  endpoint:
    Description:
      zh-cn: 对外暴露的公网IP地址
      en: Public IP Addresses
    Value:
      Fn::Sub:
        - http://${ServerAddress}
        - ServerAddress:
            Fn::GetAtt:
              - EipSlbAddress
              - EipAddress
# 定义资源
Resources:
  # 新建vpc
  EcsVpc:
    Type: ALIYUN::ECS::VPC
    Properties:
      CidrBlock:
        Ref: VpcCidrBlock
      VpcName:
        Ref: ALIYUN::StackName
  # 新建vswitch
  EcsVSwitch:
    Type: ALIYUN::ECS::VSwitch
    Properties:
      VpcId:
        Ref: EcsVpc
      ZoneId:
        Ref: ZoneId
      CidrBlock:
        Ref: VSwitchCidrBlock
  # 新建安全组
  EcsSecurityGroup:
    Type: ALIYUN::ECS::SecurityGroup
    Properties:
      VpcId:
        Ref: EcsVpc
      # 只开放访问外网的规则
      SecurityGroupEgress:
        - PortRange: '-1/-1'
          Priority: 1
          IpProtocol: all
          DestCidrIp: 0.0.0.0/0
          NicType: intranet
  # 新建托管版ack
  ManagedKubernetesCluster:
    Type: ALIYUN::CS::ManagedKubernetesCluster
    Properties:
      ChargeType:
        Ref: PayType
      Period:
        Ref: PayPeriod
      PeriodUnit:
        Ref: PayPeriodUnit
      VSwitchIds:
        - Ref: EcsVSwitch
      VpcId:
        Ref: EcsVpc
      WorkerInstanceTypes:
        - Ref: WorkerInstanceType
      # 定义ack节点数
      NumOfNodes: 3
      ClusterSpec: ack.pro.small
      ContainerCidr: 172.20.0.0/16
      ServiceCidr: 172.21.0.0/20
      ZoneIds:
        - Ref: ZoneId
      SecurityGroupId:
        Ref: EcsSecurityGroup
      WorkerSystemDiskCategory:
        Ref: WorkerSystemDiskCategory
      WorkerSystemDiskSize:
        Ref: WorkerSystemDiskSize
      LoginPassword:
        Ref: LoginPassword
      SnatEntry: true
      # 指定插件
      Addons:
        - Name: flannel
          Config: ''
      Name:
        Ref: ALIYUN::StackName
  # 新建负载均衡
  Slb:
    Type: ALIYUN::SLB::LoadBalancer
    Properties:
      PayType:
        Ref: PayType
      PricingCycle:
        Ref: PayPeriodUnit
      Duration:
        Ref: PayPeriod
      VpcId:
        Ref: EcsVpc
      VSwitchId:
        Ref: EcsVSwitch
      LoadBalancerName:
        Ref: ALIYUN::StackName
      LoadBalancerSpec:
        Ref: LoadBalancerSpec
      AddressType: intranet
  # 新建eip
  EipSlbAddress:
    Type: ALIYUN::VPC::EIP
    Properties:
      InternetChargeType: PayByTraffic
      Bandwidth: 100
  # 绑定eip到负载均衡
  EipSlbAddressAssociation:
    Type: ALIYUN::VPC::EIPAssociation
    Properties:
      InstanceId:
        Ref: Slb
      AllocationId:
        Ref: EipSlbAddress
  # 定义waitCondition和waitConditionHandle来等待跳板机命令执行完毕部署成功
  WaitCondition:
    Type: ALIYUN::ROS::WaitCondition
    DependsOn:
      - ManagedKubernetesCluster
    Properties:
      Count: 1
      Handle:
        Ref: WaitConditionHandle
      # 等待300s
      Timeout: 300
  WaitConditionHandle:
    Type: ALIYUN::ROS::WaitConditionHandle
  # 新建ecs跳板集用于后续的部署运维
  EcsInstanceJumpBox:
    Type: ALIYUN::ECS::InstanceGroup
    DependsOn:
      - ManagedKubernetesCluster
      - Slb
    Properties:
      InstanceChargeType:
        Ref: PayType
      Period:
        Ref: PayPeriod
      PeriodUnit:
        Ref: PayPeriodUnit
      InstanceName: jumpbox
      ImageId: centos_7
      InstanceType:
        Ref: EcsInstanceType
      VpcId:
        Ref: EcsVpc
      VSwitchId:
        Ref: EcsVSwitch
      SecurityGroupId:
        Ref: EcsSecurityGroup
      AllocatePublicIP: false
      Password:
        Ref: LoginPassword
      MaxAmount: 1
      SystemDiskSize:
        Ref: SystemDiskSize
      SystemDiskCategory:
        Ref: SystemDiskCategory
      # cloud-init执行用户命令
      # /var/log/cloud-init.log /var/log/cloud-init-output.log 可以看到执行日志
      # /var/lib/cloud/instance/scripts/part-001 为具体的脚本 可以sh 执行来排查问题
      UserData:
        # Fn::Sub 会对 ${xxx} 定义的变量做替换
        Fn::Sub:
          - |
            #!/bin/bash

            # 安装kubectl
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -o root -g root -m 0755 kubectl /usr/bin/kubectl

            # 配置kubeconfig信息
            mkdir -p ~/.kube
            echo '${KubeConfig}' >> ~/.kube/config
            echo '${ApplicationYaml}' > ~/application.yaml
            sleep 10

            # 应用容器模版
            kubectl --kubeconfig ~/.kube/config apply -f ~/application.yaml

            # 执行成功回调WaitCondition结束waitCondition的等待
             ${CurlCli} -d "{\"Data\" : \"Success\", \"status\" : \"SUCCESS\"}"
          # 获取到ack的kubeconfig写入到 ${KubeConfig}变量里
          - KubeConfig:
              Fn::GetAtt:
                - ManagedKubernetesCluster
                - PrivateUserKubConfig
            # 获取到waitConditionHandle的地址放到 ${CurlCli}变量里
            CurlCli:
              Fn::GetAtt:
                - WaitConditionHandle
                - CurlCli
            # application.yaml定义通过Fn::Sub替换LoadBalancerId
            ApplicationYaml:
              Fn::Sub:
                - |
                  apiVersion: apps/v1
                  kind: Deployment
                  metadata:
                    name: nginx
                    labels:
                      app: nginx
                  spec:
                    replicas: 1
                    selector:
                      matchLabels:
                        app: nginx
                    template:
                      metadata:
                        labels:
                          app: nginx
                      spec:
                        containers:
                        - name: nginx
                          image: nginx:1.14.2
                          ports:
                          - containerPort: 80
                  ---
                  apiVersion: v1
                  kind: Service
                  metadata:
                    annotations:
                      service.beta.kubernetes.io/alibaba-cloud-loadbalancer-id: ${LoadBalancerId}
                      service.beta.kubernetes.io/alicloud-loadbalancer-force-override-listeners: "true"
                    labels:
                      app: nginx
                    name: nginx-svc
                  spec:
                    ports:
                    - port: 80
                      protocol: TCP
                      targetPort: 80
                    selector:
                      app: nginx
                    type: LoadBalancer
                - LoadBalancerId:
                    Fn::GetAtt:
                      - Slb
                      - LoadBalancerId
