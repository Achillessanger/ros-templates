{
  "ROSTemplateFormatVersion": "2015-09-01",
  "Description": "Docker for Aliyun",
  "Mappings": {
    "VpcCidrs": {
      "pubsubnet": {
        "cidr": "192.168.33.0/24"
      },
      "vpc": {
        "cidr": "192.168.0.0/16"
      }
    }
  },
  "Parameters": {
    "ManagerInstanceType": {
      "Type": "String",
      "Description": "Manager ECS instance type, <a href='#/product/cn-beijing/list/typeList' target='_blank'>View instance types</a>",
      "Label": "Manager ECS Instance Type",
      "Default": "ecs.c5.large",
      "AllowedValues": [
        "ecs.c5.large",
        "ecs.g5.large",
        "ecs.c5.xlarge",
        "ecs.g5.xlarge"
      ]
    },
    "AdditionalManagerSize": {
      "Type": "Number",
      "Description": "Number of additional Swarm manager nodes (0, 2, 4)",
      "Label": "Additional Manager Size",
      "Default": 2,
      "AllowedValues": [
        0,
        2,
        4
      ]
    },
    "ClusterSize": {
      "Type": "Number",
      "Description": "Number of worker nodes in the Swarm (1-1000).",
      "Label": "Cluster Size",
      "Default": 3,
      "MaxValue": "1000",
      "MinValue": "1"
    },
    "PubSubnetZoneId": {
      "Type": "String",
      "Description": "Available Zone Id, <a href='#/product/cn-beijing/list/zoneList' target='_blank'>View zoneid info</a>",
      "Label": "Pub Subnet Zone Id"
    },
    "NodeSystemDiskCategory": {
      "Type": "String",
      "Description": "Category of Node system disk, default is 'cloud_ssd'",
      "Label": "Node System Disk Category",
      "Default": "cloud_ssd",
      "AllowedValues": [
        "cloud_efficiency",
        "cloud_ssd"
      ]
    },
    "NodeInstanceType": {
      "Type": "String",
      "Description": "Node ECS instance type, <a href='#/product/cn-beijing/list/typeList' target='_blank'>View instance types</a>",
      "Label": "Node ECS Instance Type",
      "Default": "ecs.c5.large",
      "AllowedValues": [
        "ecs.c5.large",
        "ecs.g5.large",
        "ecs.c5.xlarge",
        "ecs.g5.xlarge"
      ]
    },
    "ManagerIoOptimized": {
      "Type": "String",
      "Description": "The 'optimized' instance can provide better IO performance. Support 'none' and 'optimized' only, default is 'optimized'.",
      "Label": "Manager Io Optimized",
      "Default": "optimized",
      "AllowedValues": [
        "none",
        "optimized"
      ]
    },
    "InstancePassword": {
      "Type": "String",
      "Description": "The login password of ECS instance consists of alphanumeric characters (All ECS Instance Password).",
      "ConstraintDescription": "Consist of alphanumeric characters",
      "Label": "Instance Password",
      "MaxLength": "41",
      "MinLength": "8",
      "AllowedPattern": "[a-zA-Z0-9-\\(\\)\\`\\~\\!@\\#\\$%\\^&\\*-+=\\|\\{\\}\\[\\]\\:\\;\\\u2018\\,\\.\\?\\/]*",
      "NoEcho": true,
      "Confirm": true
    },
    "ManagerImageId": {
      "Type": "String",
      "Description": "Image Id, represents the image resource to startup one ECS instance, <a href='#/product/cn-beijing/list/imageList' target='_blank'>View image resources</a>",
      "Label": "Manager ECS Image Id",
      "Default": "ubuntu_16"
    },
    "NodeImageId": {
      "Type": "String",
      "Description": "Image Id, represents the image resource to startup one ECS instance, <a href='#/product/cn-beijing/list/imageList' target='_blank'>View image resources</a>",
      "Label": "Node ECS Image Id",
      "Default": "ubuntu_16"
    },
    "NodeIoOptimized": {
      "Type": "String",
      "Description": "The 'optimized' instance can provide better IO performance. Support 'none' and 'optimized' only, default is 'optimized'.",
      "Label": "Node Io Optimized",
      "Default": "optimized",
      "AllowedValues": [
        "none",
        "optimized"
      ]
    },
    "ManagerSystemDiskCategory": {
      "Type": "String",
      "Description": "Category of Manager system disk, default is 'cloud_ssd'",
      "Label": "Manager System Disk Category",
      "Default": "cloud_ssd",
      "AllowedValues": [
        "cloud_efficiency",
        "cloud_ssd"
      ]
    }
  },
  "Resources": {
    "ExtSLBAttachmentMaster": {
      "Type": "ALIYUN::SLB::BackendServerAttachment",
      "Properties": {
        "BackendServerList": {
          "Fn::GetAtt": [
            "Master",
            "InstanceIds"
          ]
        },
        "LoadBalancerId": {
          "Ref": "ExternalLoadBalancer"
        }
      }
    },
    "Vpc": {
      "Type": "ALIYUN::ECS::VPC",
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": [
            "VpcCidrs",
            "vpc",
            "cidr"
          ]
        }
      }
    },
    "NatGateway": {
      "Type": "ALIYUN::ECS::NatGateway",
      "Properties": {
        "BandwidthPackage": [
          {
            "IpCount": 1,
            "Bandwidth": 10
          }
        ],
        "VpcId": {
          "Fn::GetAtt": [
            "Vpc",
            "VpcId"
          ]
        },
        "NatGatewayName": "NatGateway",
        "VSwitchId": {
          "Ref": "PubSubnet"
        },
        "Spec": "Small"
      }
    },
    "ManagerVpcSG": {
      "Type": "ALIYUN::ECS::SecurityGroup",
      "Properties": {
        "Description": "Manager SecurityGroup",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "PortRange": "22/22",
            "SourceCidrIp": "0.0.0.0/0",
            "IpProtocol": "tcp"
          },
          {
            "SourceGroupId": {
              "Fn::GetAtt": [
                "NodeVpcSG",
                "SecurityGroupId"
              ]
            },
            "PortRange": "2375/2375",
            "IpProtocol": "tcp"
          },
          {
            "SourceGroupId": {
              "Fn::GetAtt": [
                "NodeVpcSG",
                "SecurityGroupId"
              ]
            },
            "PortRange": "2377/2377",
            "IpProtocol": "tcp"
          },
          {
            "SourceGroupId": {
              "Fn::GetAtt": [
                "NodeVpcSG",
                "SecurityGroupId"
              ]
            },
            "PortRange": "4789/4789",
            "IpProtocol": "udp"
          },
          {
            "SourceGroupId": {
              "Fn::GetAtt": [
                "NodeVpcSG",
                "SecurityGroupId"
              ]
            },
            "PortRange": "7946/7946",
            "IpProtocol": "tcp"
          },
          {
            "SourceGroupId": {
              "Fn::GetAtt": [
                "NodeVpcSG",
                "SecurityGroupId"
              ]
            },
            "PortRange": "7946/7946",
            "IpProtocol": "udp"
          }
        ]
      }
    },
    "NodeGroupConditionHandle": {
      "Type": "ALIYUN::ROS::WaitConditionHandle"
    },
    "MasterWaitCondition": {
      "Type": "ALIYUN::ROS::WaitCondition",
      "Properties": {
        "Timeout": 600,
        "Count": 2,
        "Handle": {
          "Ref": "MasterConditionHandle"
        }
      },
      "DependsOn": "Master"
    },
    "NodeVpcSG": {
      "Type": "ALIYUN::ECS::SecurityGroup",
      "Properties": {
        "Description": "Node SecurityGroup",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "PortRange": "22/22",
            "SourceCidrIp": "0.0.0.0/0",
            "IpProtocol": "tcp"
          },
          {
            "PortRange": "80/80",
            "SourceCidrIp": "0.0.0.0/0",
            "IpProtocol": "tcp"
          }
        ]
      }
    },
    "ExtSLBAttachmentManagerGroup": {
      "Type": "ALIYUN::SLB::BackendServerAttachment",
      "Properties": {
        "BackendServerList": {
          "Fn::GetAtt": [
            "ManagerGroup",
            "InstanceIds"
          ]
        },
        "LoadBalancerId": {
          "Ref": "ExternalLoadBalancer"
        }
      }
    },
    "ManagerGroupConditionHandle": {
      "Type": "ALIYUN::ROS::WaitConditionHandle"
    },
    "MasterAddSwarmWideSG": {
      "Type": "ALIYUN::ECS::JoinSecurityGroup",
      "Properties": {
        "InstanceId": {
          "Ref": "Master"
        },
        "SecurityGroupId": {
          "Ref": "SwarmWideSG"
        }
      },
      "DependsOn": "ManagerGroup"
    },
    "MasterConditionHandle": {
      "Type": "ALIYUN::ROS::WaitConditionHandle"
    },
    "NodeAddSwarmWideSG": {
      "Type": "ALIYUN::ECS::JoinSecurityGroup",
      "Properties": {
        "SecurityGroupId": {
          "Ref": "SwarmWideSG"
        },
        "InstanceIdList": {
          "Fn::GetAtt": [
            "NodeGroup",
            "InstanceIds"
          ]
        }
      }
    },
    "ExternalLoadBalancer": {
      "Type": "ALIYUN::SLB::LoadBalancer",
      "Properties": {
        "LoadBalancerName": "ExternalLoadBalancer",
        "AddressType": "internet"
      }
    },
    "ManagerGroupWaitCondition": {
      "Type": "ALIYUN::ROS::WaitCondition",
      "Properties": {
        "Timeout": 300,
        "Count": 1,
        "Handle": {
          "Ref": "ManagerGroupConditionHandle"
        }
      },
      "DependsOn": "ManagerGroup"
    },
    "ManagerGroup": {
      "Type": "ALIYUN::ECS::InstanceGroup",
      "Properties": {
        "IoOptimized": {
          "Ref": "ManagerIoOptimized"
        },
        "VpcId": {
          "Ref": "Vpc"
        },
        "UserData": {
          "Fn::Replace": [
            {
              "ros-notify": {
                "Fn::GetAtt": [
                  "ManagerGroupConditionHandle",
                  "CurlCli"
                ]
              }
            },
            {
              "Fn::Join": [
                "",
                [
                  "#!/bin/sh\n",
                  "data='",
                  {
                    "Fn::GetAtt": [
                      "MasterWaitCondition",
                      "Data"
                    ]
                  },
                  "'\n",
                  "master_ip='",
                  {
                    "Fn::Select": [
                      "0",
                      {
                        "Fn::GetAtt": [
                          "Master",
                          "PrivateIps"
                        ]
                      }
                    ]
                  },
                  "'\n",
                  "slb_id='",
                  {
                    "Fn::GetAtt": [
                      "ExternalLoadBalancer",
                      "LoadBalancerId"
                    ]
                  },
                  "'\n",
                  "ak_id='",
                  {
                    "Fn::GetAtt": [
                      "AccessKey",
                      "AccessKeyId"
                    ]
                  },
                  "'\n",
                  "ak_secret='",
                  {
                    "Fn::GetAtt": [
                      "AccessKey",
                      "AccessKeySecret"
                    ]
                  },
                  "'\n",
                  "echo $data > /tmp/tokens\n",
                  "apt-get update\n",
                  "apt-get install -y curl\n",
                  "apt-get install -y jq\n",
                  "sed -i 's/archive.ubuntu.com/mirrors.aliyun.com/' /etc/apt/sources.list\n",
                  "if [ ! -f /usr/bin/docker ]; then\n",
                  "    curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/intranet  | sh - \n",
                  "    echo DOCKER_OPTS=\"'--registry-mirror https://6udu7vtl.mirror.aliyuncs.com'\" > /etc/default/docker\n",
                  "    sleep 10\n",
                  "    sudo service docker restart \n",
                  "fi\n",
                  "usermod -aG docker $USER\n",
                  "token=`echo \"$data\" | jq '.tokens'[1] | xargs echo `\n",
                  "echo $token > /tmp/manager_token \n",
                  "cmd=\"ros-notify -d '{\\\"data\\\" : \\\"$token\\\"}'\"\n",
                  "eval $cmd\n",
                  "docker swarm join --token=$token ${master_ip}:2377\n",
                  "mkdir -p /var/lib/docker/swarm/\n",
                  "echo $ak_id > /var/lib/docker/swarm/access_key_id\n",
                  "echo $ak_secret > /var/lib/docker/swarm/access_key_secret\n",
                  "echo $slb_id > /var/lib/docker/swarm/lb_name\n",
                  "docker run -d --restart always --name controller -p 2375:2375 -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker/swarm/access_key_id:/var/lib/docker/swarm/access_key_id:ro -v /var/lib/docker/swarm/access_key_secret:/var/lib/docker/swarm/access_key_secret:ro -v /var/lib/docker/swarm/lb_name:/var/lib/docker/swarm/lb_name:ro registry.cn-hangzhou.aliyuncs.com/acs/agent:0.8 --log-level debug aliyun-controller\n",
                  "echo $token > ~/manager_token\n",
                  "ssh_keys=`echo \"$data\" | jq '.ssh_keys' | xargs echo `\n",
                  "echo $ssh_keys > /tmp/ssh_keys\n",
                  "base64 -d /tmp/ssh_keys > /tmp/host_keys.tar.gz\n",
                  "cd /etc/ssh\n",
                  "mkdir backup_host_keys\n",
                  "cp ssh_host_*key* backup_host_keys\n",
                  "tar -xzf /tmp/host_keys.tar.gz\n"
                ]
              ]
            }
          ]
        },
        "SystemDisk_Category": {
          "Ref": "ManagerSystemDiskCategory"
        },
        "MinAmount": "1",
        "SecurityGroupId": {
          "Fn::GetAtt": [
            "ManagerVpcSG",
            "SecurityGroupId"
          ]
        },
        "VSwitchId": {
          "Ref": "PubSubnet"
        },
        "ImageId": {
          "Ref": "ManagerImageId"
        },
        "AllocatePublicIP": false,
        "InstanceType": {
          "Ref": "ManagerInstanceType"
        },
        "MaxAmount": {
          "Ref": "AdditionalManagerSize"
        },
        "Password": {
          "Ref": "InstancePassword"
        }
      },
      "DependsOn": "Master"
    },
    "NodeGroupWaitCondition": {
      "Type": "ALIYUN::ROS::WaitCondition",
      "Properties": {
        "Timeout": 300,
        "Count": 1,
        "Handle": {
          "Ref": "NodeGroupConditionHandle"
        }
      },
      "DependsOn": "NodeGroup"
    },
    "AccessKey": {
      "Type": "ALIYUN::RAM::AccessKey",
      "Properties": {
        "UserName": {
          "Fn::GetAtt": [
            "SubAccount",
            "UserName"
          ]
        }
      }
    },
    "ExternalLoadBalancerListener": {
      "Type": "ALIYUN::SLB::Listener",
      "Properties": {
        "Persistence": {
          "StickySession": "on",
          "PersistenceTimeout": 600
        },
        "ListenerPort": "7",
        "Bandwidth": -1,
        "HealthCheck": {
          "UnhealthyThreshold": "4",
          "Timeout": "2",
          "HealthyThreshold": "2",
          "Port": "2375",
          "Interval": "5"
        },
        "LoadBalancerId": {
          "Ref": "ExternalLoadBalancer"
        },
        "Protocol": "tcp",
        "BackendServerPort": "2375"
      },
      "DependsOn": "ExternalLoadBalancer"
    },
    "SSHLoadBalancer": {
      "Type": "ALIYUN::SLB::LoadBalancer",
      "Properties": {
        "LoadBalancerName": "SSHLoadBalancer",
        "AddressType": "internet"
      }
    },
    "NodeGroup": {
      "Type": "ALIYUN::ECS::InstanceGroup",
      "Properties": {
        "IoOptimized": {
          "Ref": "NodeIoOptimized"
        },
        "VpcId": {
          "Ref": "Vpc"
        },
        "UserData": {
          "Fn::Replace": [
            {
              "ros-notify": {
                "Fn::GetAtt": [
                  "NodeGroupConditionHandle",
                  "CurlCli"
                ]
              }
            },
            {
              "Fn::Join": [
                "",
                [
                  "#!/bin/sh\n",
                  "tokens='",
                  {
                    "Fn::GetAtt": [
                      "MasterWaitCondition",
                      "Data"
                    ]
                  },
                  "'\n",
                  "master_ip='",
                  {
                    "Fn::Select": [
                      "0",
                      {
                        "Fn::GetAtt": [
                          "Master",
                          "PrivateIps"
                        ]
                      }
                    ]
                  },
                  "'\n",
                  "echo $tokens > /tmp/tokens\n",
                  "apt-get update\n",
                  "apt-get install -y curl\n",
                  "apt-get install -y jq\n",
                  "sed -i 's/archive.ubuntu.com/mirrors.aliyun.com/' /etc/apt/sources.list\n",
                  "if [ ! -f /usr/bin/docker ]; then\n",
                  "    curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/intranet | sh - \n",
                  "    echo DOCKER_OPTS=\"'--registry-mirror https://6udu7vtl.mirror.aliyuncs.com'\" > /etc/default/docker\n",
                  "    sleep 10\n",
                  "    sudo service docker restart \n",
                  "fi\n",
                  "\n",
                  "usermod -aG docker $USER\n",
                  "token=`echo \"$tokens\" | jq '.tokens'[0] | xargs echo `\n",
                  "echo $token > /tmp/worker_token \n",
                  "cmd=\"ros-notify -d '{\\\"data\\\" : \\\"$token\\\"}'\"\n",
                  "eval $cmd\n",
                  "docker swarm join --token=$token ${master_ip}:2377\n",
                  "docker run -d --restart always --name controller -p 2375:2375 registry.cn-hangzhou.aliyuncs.com/acs/agent:0.8 --log-level debug aliyun-controller\n",
                  "echo $token > ~/worker_token\n"
                ]
              ]
            }
          ]
        },
        "SystemDisk_Category": {
          "Ref": "NodeSystemDiskCategory"
        },
        "MinAmount": "1",
        "SecurityGroupId": {
          "Fn::GetAtt": [
            "NodeVpcSG",
            "SecurityGroupId"
          ]
        },
        "VSwitchId": {
          "Ref": "PubSubnet"
        },
        "ImageId": {
          "Ref": "NodeImageId"
        },
        "AllocatePublicIP": false,
        "InstanceType": {
          "Ref": "NodeInstanceType"
        },
        "MaxAmount": {
          "Ref": "ClusterSize"
        },
        "Password": {
          "Ref": "InstancePassword"
        }
      },
      "DependsOn": "Master"
    },
    "ExtSLBAttachmentNodeGroup": {
      "Type": "ALIYUN::SLB::BackendServerAttachment",
      "Properties": {
        "BackendServerList": {
          "Fn::GetAtt": [
            "NodeGroup",
            "InstanceIds"
          ]
        },
        "LoadBalancerId": {
          "Ref": "ExternalLoadBalancer"
        }
      }
    },
    "PubSubnet": {
      "Type": "ALIYUN::ECS::VSwitch",
      "Properties": {
        "VpcId": {
          "Fn::GetAtt": [
            "Vpc",
            "VpcId"
          ]
        },
        "ZoneId": {
          "Ref": "PubSubnetZoneId"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "VpcCidrs",
            "pubsubnet",
            "cidr"
          ]
        }
      }
    },
    "SwarmWideSG": {
      "Type": "ALIYUN::ECS::SecurityGroup",
      "Properties": {
        "Description": "Wide open",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "PortRange": "-1/-1",
            "SourceCidrIp": {
              "Fn::FindInMap": [
                "VpcCidrs",
                "vpc",
                "cidr"
              ]
            },
            "IpProtocol": "all"
          }
        ]
      },
      "DependsOn": "NodeVpcSG"
    },
    "SSHLoadBalancerListener": {
      "Type": "ALIYUN::SLB::Listener",
      "Properties": {
        "Persistence": {
          "StickySession": "on",
          "PersistenceTimeout": 1000
        },
        "ListenerPort": "22",
        "Bandwidth": -1,
        "HealthCheck": {
          "UnhealthyThreshold": "4",
          "Timeout": "2",
          "HealthyThreshold": "2",
          "Port": "22",
          "Interval": "5"
        },
        "LoadBalancerId": {
          "Ref": "SSHLoadBalancer"
        },
        "Protocol": "tcp",
        "BackendServerPort": "22"
      },
      "DependsOn": "SSHLoadBalancer"
    },
    "Master": {
      "Type": "ALIYUN::ECS::InstanceGroup",
      "Properties": {
        "IoOptimized": {
          "Ref": "ManagerIoOptimized"
        },
        "VpcId": {
          "Ref": "Vpc"
        },
        "UserData": {
          "Fn::Replace": [
            {
              "ros-notify": {
                "Fn::GetAtt": [
                  "MasterConditionHandle",
                  "CurlCli"
                ]
              }
            },
            {
              "Fn::Join": [
                "",
                [
                  "#!/bin/sh\n",
                  "slb_id='",
                  {
                    "Fn::GetAtt": [
                      "ExternalLoadBalancer",
                      "LoadBalancerId"
                    ]
                  },
                  "'\n",
                  "ak_id='",
                  {
                    "Fn::GetAtt": [
                      "AccessKey",
                      "AccessKeyId"
                    ]
                  },
                  "'\n",
                  "ak_secret='",
                  {
                    "Fn::GetAtt": [
                      "AccessKey",
                      "AccessKeySecret"
                    ]
                  },
                  "'\n",
                  "ip_addr=`ip addr | grep eth0 | grep -o '[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}/' | cut -d '/' -f 1`\n",
                  "apt-get update\n",
                  "apt-get install -y curl\n",
                  "sed -i 's/archive.ubuntu.com/mirrors.aliyun.com/' /etc/apt/sources.list\n",
                  "if [ ! -f /usr/bin/docker ]; then\n",
                  "    curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/intranet | sh -\n",
                  "    echo DOCKER_OPTS=\"'--registry-mirror https://6udu7vtl.mirror.aliyuncs.com'\" > /etc/default/docker\n",
                  "    sleep 10\n",
                  "    sudo service docker restart\n",
                  "fi\n",
                  "usermod -aG docker $USER\n",
                  "docker swarm init --advertise-addr $ip_addr\n",
                  "worker_token=`docker swarm join-token -q worker`\n",
                  "manager_token=`docker swarm join-token -q manager`\n",
                  "echo $worker_token, $manager_token > /tmp/tokens\n",
                  "cmd=\"ros-notify -d '{\\\"id\\\" : \\\"tokens\\\", \\\"data\\\" : [\\\"$worker_token\\\", \\\"$manager_token\\\"]}'\"\n",
                  "eval $cmd\n",
                  "mkdir -p /var/lib/docker/swarm/\n",
                  "echo $ak_id > /var/lib/docker/swarm/access_key_id\n",
                  "echo $ak_secret > /var/lib/docker/swarm/access_key_secret\n",
                  "echo $slb_id > /var/lib/docker/swarm/lb_name\n",
                  "docker run -d --restart always --name controller -p 2375:2375 -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker/swarm/access_key_id:/var/lib/docker/swarm/access_key_id:ro -v /var/lib/docker/swarm/access_key_secret:/var/lib/docker/swarm/access_key_secret:ro -v /var/lib/docker/swarm/lb_name:/var/lib/docker/swarm/lb_name:ro registry.cn-hangzhou.aliyuncs.com/acs/agent:0.8 --log-level debug aliyun-controller\n",
                  "echo $worker_token, $manager_token > ~/tokens\n",
                  "cd /etc/ssh\n",
                  "tar -czf host_keys.tar.gz ssh_host_*key*\n",
                  "ssh_keys=`base64 -w 0 host_keys.tar.gz`\n",
                  "cmd=\"ros-notify -d '{\\\"id\\\" : \\\"ssh_keys\\\", \\\"data\\\" : \\\"$ssh_keys\\\"}'\"\n",
                  "eval $cmd\n",
                  "echo $ssh_keys > /tmp/ssh_keys\n"
                ]
              ]
            }
          ]
        },
        "SystemDisk_Category": {
          "Ref": "ManagerSystemDiskCategory"
        },
        "MinAmount": "1",
        "SecurityGroupId": {
          "Fn::GetAtt": [
            "ManagerVpcSG",
            "SecurityGroupId"
          ]
        },
        "VSwitchId": {
          "Ref": "PubSubnet"
        },
        "ImageId": {
          "Ref": "ManagerImageId"
        },
        "AllocatePublicIP": false,
        "InstanceType": {
          "Ref": "ManagerInstanceType"
        },
        "MaxAmount": "1",
        "Password": {
          "Ref": "InstancePassword"
        }
      }
    },
    "ECSManagePolicy": {
      "Type": "ALIYUN::RAM::ManagedPolicy",
      "Properties": {
        "PolicyName": {
          "Fn::Join": [
            "",
            [
              "ECSManagePolicy",
              {
                "Ref": "ALIYUN::StackId"
              }
            ]
          ]
        },
        "PolicyDocument": {
          "Version": "1",
          "Statement": [
            {
              "Action": [
                "ecs:*"
              ],
              "Resource": [
                "*"
              ],
              "Effect": "Allow"
            },
            {
              "Action": [
                "vpc:DescribeVpcs",
                "vpc:DescribeVSwitches"
              ],
              "Resource": [
                "*"
              ],
              "Effect": "Allow"
            }
          ]
        },
        "Users": [
          {
            "Fn::GetAtt": [
              "SubAccount",
              "UserName"
            ]
          }
        ]
      }
    },
    "ManagerAddSwarmWideSG": {
      "Type": "ALIYUN::ECS::JoinSecurityGroup",
      "Properties": {
        "SecurityGroupId": {
          "Ref": "SwarmWideSG"
        },
        "InstanceIdList": {
          "Fn::GetAtt": [
            "ManagerGroup",
            "InstanceIds"
          ]
        }
      },
      "DependsOn": "ManagerGroup"
    },
    "SSHSLBAttachmentMaster": {
      "Type": "ALIYUN::SLB::BackendServerAttachment",
      "Properties": {
        "BackendServerList": {
          "Fn::GetAtt": [
            "Master",
            "InstanceIds"
          ]
        },
        "LoadBalancerId": {
          "Ref": "SSHLoadBalancer"
        }
      }
    },
    "SLBManagePolicy": {
      "Type": "ALIYUN::RAM::ManagedPolicy",
      "Properties": {
        "PolicyName": {
          "Fn::Join": [
            "",
            [
              "SLBManagePolicy",
              {
                "Ref": "ALIYUN::StackId"
              }
            ]
          ]
        },
        "PolicyDocument": {
          "Version": "1",
          "Statement": [
            {
              "Action": [
                "slb:*"
              ],
              "Resource": [
                "*"
              ],
              "Effect": "Allow"
            },
            {
              "Action": [
                "ecs:DescribeInstances"
              ],
              "Resource": [
                "*"
              ],
              "Effect": "Allow"
            },
            {
              "Action": [
                "cms:QueryMetric"
              ],
              "Resource": [
                "*"
              ],
              "Effect": "Allow"
            }
          ]
        },
        "Users": [
          {
            "Fn::GetAtt": [
              "SubAccount",
              "UserName"
            ]
          }
        ]
      }
    },
    "SubAccount": {
      "Type": "ALIYUN::RAM::User",
      "Properties": {
        "UserName": {
          "Fn::Join": [
            "",
            [
              "SubAccount",
              {
                "Ref": "ALIYUN::StackId"
              }
            ]
          ]
        }
      }
    },
    "SSHSLBAttachmentManagerGroup": {
      "Type": "ALIYUN::SLB::BackendServerAttachment",
      "Properties": {
        "BackendServerList": {
          "Fn::GetAtt": [
            "ManagerGroup",
            "InstanceIds"
          ]
        },
        "LoadBalancerId": {
          "Ref": "SSHLoadBalancer"
        }
      }
    },
    "SNatEntry": {
      "Type": "ALIYUN::ECS::SNatEntry",
      "Properties": {
        "SourceVSwitchId": {
          "Fn::GetAtt": [
            "PubSubnet",
            "VSwitchId"
          ]
        },
        "SNatTableId": {
          "Fn::GetAtt": [
            "NatGateway",
            "SNatTableId"
          ]
        },
        "SNatIp": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAtt": [
                "NatGateway",
                "BandwidthPackageIps"
              ]
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "SSHLoadBalancerIp": {
      "Description": "public ip of slb for ssh",
      "Value": {
        "Fn::GetAtt": [
          "SSHLoadBalancer",
          "IpAddress"
        ]
      }
    },
    "ExternalLoadBalancerIp": {
      "Description": "public ip for docker service",
      "Value": {
        "Fn::GetAtt": [
          "ExternalLoadBalancer",
          "IpAddress"
        ]
      }
    }
  }
}