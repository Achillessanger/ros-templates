{
  "ROSTemplateFormatVersion": "2015-09-01",
  "Description": "Creates an ECS and configure SSH key",
  "Mappings": {
    "VpcCidrs": {
      "pubsubnet": {
        "cidr": "192.168.1.0/24"
      },
      "vpc": {
        "cidr": "192.168.0.0/16"
      }
    }
  },
  "Parameters": {
    "Bandwidth": {
      "Type": "Number",
      "Description": "Specify the peak bandwidth of public internet type instance, if PayByBandwidth is selected. The unit is Mbps.",
      "Label": "EIP Bandwidth",
      "Default": 1,
      "MaxValue": 1000,
      "MinValue": 1
    },
    "ImageId": {
      "Type": "String",
      "Description": "Image Id, represents the image resource to startup one ECS instance, <a href='#/product/cn-beijing/list/imageList' target='_blank'>View image resources</a>",
      "Label": "ECS Image Id",
      "Default": "ubuntu_14"
    },
    "InstancePassword": {
      "Type": "String",
      "Description": "The root password of ECS instance. The password is a string of 8 to 41 characters and must contain uppercase/lowercase letters, numbers.",
      "ConstraintDescription": "Consist of 8 to 30 alphanumeric.",
      "Label": "ECS Instance Password",
      "MaxLength": "30",
      "MinLength": "8",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "NoEcho": true,
      "Confirm": true
    },
    "InstanceType": {
      "Type": "String",
      "Description": "The ECS instance type, <a href='#/product/cn-beijing/list/typeList' target='_blank'>View instance types</a>",
      "Label": "ECS Instance Type",
      "Default": "ecs.c5.large",
      "AllowedValues": [
        "ecs.c5.large",
        "ecs.g5.large",
        "ecs.c5.xlarge",
        "ecs.g5.xlarge"
      ]
    },
    "InternetChargeType": {
      "Type": "String",
      "Description": "The charge type of public internet",
      "Label": "Internet Charge Type",
      "Default": "PayByTraffic",
      "AllowedValues": [
        "PayByBandwidth",
        "PayByTraffic"
      ]
    },
    "IoOptimized": {
      "Type": "String",
      "Description": "The 'optimized' instance can provide better IO performance. Support 'none' and 'optimized' only, default is 'optimized'.",
      "Label": "Io Optimized",
      "Default": "optimized",
      "AllowedValues": [
        "none",
        "optimized"
      ]
    },
    "MaxAmount": {
      "Type": "Number",
      "Description": "Number of Swarm manager nodes (1, 3, 5)",
      "Label": "ECS Max Amount",
      "Default": 1,
      "AllowedValues": [
        1,
        3,
        5
      ]
    },
    "SystemDiskCategory": {
      "Type": "String",
      "Description": "System disk category: average cloud disk(cloud), efficient cloud disk(cloud_efficiency) or SSD cloud disk(cloud_ssd)",
      "Label": "Ecs System Disk Category",
      "Default": "cloud_ssd",
      "AllowedValues": [
        "cloud",
        "cloud_efficiency",
        "cloud_ssd"
      ]
    },
    "ZoneId": {
      "Type": "String",
      "Description": "VSwitch Available Zone Id, <a href='#/product/cn-beijing/list/zoneList' target='_blank'>View zoneid info</a>",
      "Label": "VSwitch Zone Id"
    }
  },
  "Resources": {
    "ECSFirst": {
      "Type": "ALIYUN::ECS::Instance",
      "Properties": {
        "ImageId": {
          "Ref": "ImageId"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "AllocatePublicIP": "false",
        "IoOptimized": {
          "Ref": "IoOptimized"
        },
        "Password": {
          "Ref": "InstancePassword"
        },
        "SecurityGroupId": {
          "Fn::GetAtt": [
            "SecurityGroup",
            "SecurityGroupId"
          ]
        },
        "SystemDiskCategory": {
          "Ref": "SystemDiskCategory"
        },
        "UserData": {
          "Fn::Replace": [
            {
              "ros-notify": {
                "Fn::GetAtt": [
                  "ECSFirstConditionHandle",
                  "CurlCli"
                ]
              }
            },
            {
              "Fn::Join": [
                "",
                [
                  "#!/bin/sh\n",
                  "apt-get update\n",
                  "apt-get install -y curl\n",
                  "apt-get install -y jq\n",
                  "apt-get install -y expect\n",
                  "echo '#!/usr/bin/expect' > /tmp/ssh_gen_key\n",
                  "echo spawn ssh-keygen -t rsa >> /tmp/ssh_gen_key\n",
                  "echo 'expect {' >> /tmp/ssh_gen_key\n",
                  "echo '        \"*(/root/.ssh/id_rsa)\" {send \"\\\\n\\\\r\";exp_continue}' >> /tmp/ssh_gen_key\n",
                  "echo '        \"*(empty for no passphrase)\" {send \"\\\\n\\\\r\";exp_continue}' >> /tmp/ssh_gen_key\n",
                  "echo '        \"*again\" {send \"\\\\n\\\\r\"}' >> /tmp/ssh_gen_key\n",
                  "echo '}' >> /tmp/ssh_gen_key\n",
                  "echo 'expect eof' >> /tmp/ssh_gen_key\n",
                  "\n",
                  "/usr/bin/expect /tmp/ssh_gen_key\n",
                  "pub_key=`cat /root/.ssh/id_rsa.pub`\n",
                  "cmd=\"ros-notify -d '{\\\"id\\\" : \\\"ssh_pub_key\\\", \\\"data\\\" : \\\"$pub_key\\\"}'\"\n",
                  "eval $cmd\n"
                ]
              ]
            }
          ]
        },
        "VSwitchId": {
          "Ref": "VSwitch"
        },
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "ECSFirstConditionHandle": {
      "Type": "ALIYUN::ROS::WaitConditionHandle"
    },
    "ECSFirstWaitCondition": {
      "Type": "ALIYUN::ROS::WaitCondition",
      "Properties": {
        "Count": 1,
        "Handle": {
          "Ref": "ECSFirstConditionHandle"
        },
        "Timeout": 300
      },
      "DependsOn": "ECSFirst"
    },
    "ECSSecond": {
      "Type": "ALIYUN::ECS::InstanceGroup",
      "Properties": {
        "ImageId": {
          "Ref": "ImageId"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "IoOptimized": {
          "Ref": "IoOptimized"
        },
        "MaxAmount": "1",
        "MinAmount": "1",
        "Password": {
          "Ref": "InstancePassword"
        },
        "SecurityGroupId": {
          "Fn::GetAtt": [
            "SecurityGroup",
            "SecurityGroupId"
          ]
        },
        "SystemDiskCategory": {
          "Ref": "SystemDiskCategory"
        },
        "UserData": {
          "Fn::Replace": [
            {
              "ros-notify": {
                "Fn::GetAtt": [
                  "ECSSecondConditionHandle",
                  "CurlCli"
                ]
              }
            },
            {
              "Fn::Join": [
                "",
                [
                  "#!/bin/sh\n",
                  "ssh_pub_key_json='",
                  {
                    "Fn::GetAtt": [
                      "ECSFirstWaitCondition",
                      "Data"
                    ]
                  },
                  "'\n",
                  "echo $ssh_pub_key_json > /tmp/pubkey\n",
                  "apt-get update\n",
                  "apt-get install -y curl\n",
                  "apt-get install -y jq\n",
                  "apt-get install -y expect\n",
                  "pub_key=`echo \"$ssh_pub_key_json\" | jq '.ssh_pub_key' | xargs echo `\n",
                  "echo \"$pub_key\" > /root/.ssh/authorized_keys\n",
                  "chmod 600 /root/.ssh/authorized_keys\n",
                  "sudo service ssh restart\n",
                  "cmd=\"ros-notify -d '{\\\"data\\\" : \\\"$pub_key\\\"}'\"\n",
                  "eval $cmd\n",
                  "echo $pub_key > /tmp/real_pub_key\n"
                ]
              ]
            }
          ]
        },
        "VSwitchId": {
          "Ref": "VSwitch"
        },
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "DependsOn": "ECSFirst"
    },
    "ECSSecondConditionHandle": {
      "Type": "ALIYUN::ROS::WaitConditionHandle"
    },
    "ECSSecondWaitCondition": {
      "Type": "ALIYUN::ROS::WaitCondition",
      "Properties": {
        "Count": 1,
        "Handle": {
          "Ref": "ECSSecondConditionHandle"
        },
        "Timeout": 600
      },
      "DependsOn": "ECSSecond"
    },
    "ElasticIp": {
      "Type": "ALIYUN::ECS::EIP",
      "Properties": {
        "Bandwidth": {
          "Ref": "Bandwidth"
        },
        "InternetChargeType": {
          "Ref": "InternetChargeType"
        }
      }
    },
    "ElasticIpAssociation": {
      "Type": "ALIYUN::ECS::EIPAssociation",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "ElasticIp",
            "AllocationId"
          ]
        },
        "InstanceId": {
          "Fn::GetAtt": [
            "ECSFirst",
            "InstanceId"
          ]
        }
      }
    },
    "SecurityGroup": {
      "Type": "ALIYUN::ECS::SecurityGroup",
      "Properties": {
        "Description": "Wide open",
        "SecurityGroupEgress": [
          {
            "DestCidrIp": "0.0.0.0/0",
            "IpProtocol": "all",
            "NicType": "intranet",
            "PortRange": "-1/-1",
            "Priority": 1
          }
        ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "all",
            "NicType": "intranet",
            "PortRange": "-1/-1",
            "Priority": 1,
            "SourceCidrIp": "0.0.0.0/0"
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "VSwitch": {
      "Type": "ALIYUN::ECS::VSwitch",
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": [
            "VpcCidrs",
            "pubsubnet",
            "cidr"
          ]
        },
        "VpcId": {
          "Fn::GetAtt": [
            "Vpc",
            "VpcId"
          ]
        },
        "ZoneId": {
          "Ref": "ZoneId"
        }
      }
    },
    "Vpc": {
      "Type": "ALIYUN::ECS::VPC",
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": [
            "VpcCidrs",
            "vpc",
            "cidr"
          ]
        }
      }
    }
  },
  "Outputs": {
    "ECSFirst": {
      "Description": "Private IP address of created ecs instance. Only for VPC instance.",
      "Value": {
        "Fn::GetAtt": [
          "ECSFirst",
          "PrivateIp"
        ]
      }
    },
    "ECSSecondIps": {
      "Description": "Private IP address list of created ecs instance. Only for VPC instance.",
      "Value": {
        "Fn::GetAtt": [
          "ECSSecond",
          "PrivateIps"
        ]
      }
    },
    "EipAddress": {
      "Description": "IP address of created EIP.",
      "Value": {
        "Fn::GetAtt": [
          "ElasticIp",
          "EipAddress"
        ]
      }
    },
    "PubKey": {
      "Description": "Received the data sent by the second ecs, JSON serialized dict containing data associated with wait condition signals sent to the handle.",
      "Value": {
        "Fn::GetAtt": [
          "ECSSecondWaitCondition",
          "Data"
        ]
      }
    },
    "SSHPubKey": {
      "Description": "Received the data sent by the first ecs, JSON serialized dict containing data associated with wait condition signals sent to the handle.",
      "Value": {
        "Fn::GetAtt": [
          "ECSFirstWaitCondition",
          "Data"
        ]
      }
    }
  }
}