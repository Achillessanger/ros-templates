{
  "ROSTemplateFormatVersion": "2015-09-01",
  "Description": "Deploy LNMP(Linux+Nginx+MySQL+PHP) stack on 1 ECS instance. *** WARNING *** Only support CentOS-7.",
  "Parameters": {
    "NginxDownloadUrl": {
      "Type": "String",
      "Description": "The download path of nginx-*.rpm",
      "Label": "Nginx Download Url",
      "Default": "http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm"
    },
    "DBPassword": {
      "Type": "String",
      "Description": "Password MySQL database access",
      "ConstraintDescription": "Must contain only alphanumeric characters.",
      "Label": "DB Password",
      "MaxLength": "41",
      "MinLength": "1",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "NoEcho": true,
      "Confirm": true
    },
    "ZoneId": {
      "Type": "String",
      "Description": "The ECS Available Zone ID, Notice:Whether cloned ecs Type is supported in the available zone.<a href='#/product/cn-beijing/list/zoneList' target='_blank'>View zoneid info</a>",
      "Label": "The ECS Available Zone ID"
    },
    "ImageId": {
      "Type": "String",
      "Description": "Image Id, represents the image resource to startup one ECS instance, <a href='#/product/cn-beijing/list/imageList' target='_blank'>View image resources</a>",
      "Label": "ECS Image Id",
      "Default": "centos_7"
    },
    "DBName": {
      "Type": "String",
      "Description": "MySQL database name",
      "ConstraintDescription": "Must begin with a letter and contain only alphanumeric characters.",
      "Label": "DB Name",
      "Default": "MyDatabase",
      "MaxLength": "64",
      "MinLength": "1",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*"
    },
    "DBUser": {
      "Type": "String",
      "Description": "Username for MySQL database access",
      "ConstraintDescription": "Must begin with a letter and contain only alphanumeric characters.",
      "Label": "DB Username",
      "MaxLength": "16",
      "MinLength": "1"
    },
    "DBRootPassword": {
      "Type": "String",
      "Description": "Root password for MySQL",
      "ConstraintDescription": "must contain only alphanumeric characters and numbers.",
      "Label": "DB Root Password",
      "MaxLength": "41",
      "MinLength": "1",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "NoEcho": true,
      "Confirm": true
    },
    "InstanceType": {
      "Type": "String",
      "Description": "The ECS instance type, <a href='#/product/cn-beijing/list/typeList' target='_blank'>View instance types</a>",
      "Label": "ECS Instance Type",
      "Default": "ecs.c5.large",
      "AllowedValues": [
        "ecs.c5.large",
        "ecs.g5.large",
        "ecs.c5.xlarge",
        "ecs.g5.xlarge"
      ]
    },
    "SystemDiskCategory": {
      "Type": "String",
      "Description": "System disk category: average cloud disk(cloud), efficient cloud disk(cloud_efficiency) or SSD cloud disk(cloud_ssd)",
      "Label": "System Disk Category",
      "Default": "cloud_ssd",
      "AllowedValues": [
        "cloud_efficiency",
        "cloud_ssd"
      ]
    },
    "InstancePassword": {
      "Type": "String",
      "Description": "The login password of ECS instances",
      "ConstraintDescription": "Consist of 8 to 41 characters of alphanumeric characters",
      "Label": "Instance Password",
      "MaxLength": "41",
      "MinLength": "8",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "NoEcho": true,
      "Confirm": true
    }
  },
  "Resources": {
    "VSwitch": {
      "Type": "ALIYUN::ECS::VSwitch",
      "Properties": {
        "VpcId": {
          "Fn::GetAtt": [
            "Vpc",
            "VpcId"
          ]
        },
        "ZoneId": {
          "Ref": "ZoneId"
        },
        "CidrBlock": "192.168.1.0/24"
      }
    },
    "WebServerConditionHandle": {
      "Type": "ALIYUN::ROS::WaitConditionHandle"
    },
    "WebServer": {
      "Type": "ALIYUN::ECS::Instance",
      "Properties": {
        "InternetMaxBandwidthOut": 80,
        "IoOptimized": "optimized",
        "VpcId": {
          "Fn::GetAtt": [
            "Vpc",
            "VpcId"
          ]
        },
        "UserData": {
          "Fn::Replace": [
            {
              "ros-notify": {
                "Fn::GetAtt": [
                  "WebServerConditionHandle",
                  "CurlCli"
                ]
              }
            },
            {
              "Fn::Join": [
                "",
                [
                  "#!/bin/bash \n",
                  "NginxUrl=",
                  {
                    "Ref": "NginxDownloadUrl"
                  },
                  "\n",
                  "dbname=",
                  {
                    "Ref": "DBName"
                  },
                  "\n",
                  "dbuser=",
                  {
                    "Ref": "DBUser"
                  },
                  "\n",
                  "dbpassword=",
                  {
                    "Ref": "DBPassword"
                  },
                  "\n",
                  "dbrootpassword=",
                  {
                    "Ref": "DBRootPassword"
                  },
                  "\n",
                  "export HOME=/root \n",
                  "export HOSTNAME=`hostname` \n",
                  "systemctl stop firewalld.service \n",
                  "systemctl disable firewalld.service \n",
                  "sed -i 's/^SELINUX=/# SELINUX=/' /etc/selinux/config \n",
                  "sed -i '/# SELINUX=/a SELINUX=disabled' /etc/selinux/config \n",
                  "setenforce 0 \n",
                  "yum install yum-priorities -y \n",
                  "yum -y install aria2 \n",
                  "aria2c $NginxUrl \n",
                  "rpm -ivh nginx-*.rpm \n",
                  "yum -y install nginx \n",
                  "systemctl start nginx.service \n",
                  "systemctl enable nginx.service \n",
                  "yum -y install php-fpm \n",
                  "systemctl start php-fpm.service \n",
                  "systemctl enable php-fpm.service \n",
                  "sed -i '/FastCGI/,/htaccess/s/    #/    /' /etc/nginx/conf.d/default.conf \n",
                  "sed -i '/FastCGI/s/^    /    #/' /etc/nginx/conf.d/default.conf \n",
                  "sed -i '/htaccess/s/^    /    #/' /etc/nginx/conf.d/default.conf \n",
                  "sed -i '/SCRIPT_FILENAME/s/\\/scripts/\\/usr\\/share\\/nginx\\/html\\//' /etc/nginx/conf.d/default.conf \n",
                  "yum -y install mariadb mariadb-server \n",
                  "systemctl start mariadb.service \n",
                  "systemctl enable mariadb.service \n",
                  "yum -y install php php-mysql php-gd libjpeg* php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-bcmath php-mhash php-mcrypt \n",
                  "MDSRING=`find / -name mbstring.so` \n",
                  "echo extension=$MDSRING >> /etc/php.ini \n",
                  "systemctl restart mariadb.service \n",
                  "mysqladmin -u root password \"$dbrootpassword\" \n",
                  "$(mysql $dbname -u root --password=\"$dbrootpassword\" >/dev/null 2>&1 </dev/null); (( $? != 0 )) \n",
                  "echo CREATE DATABASE $dbname \\; > /tmp/setup.mysql \n",
                  "echo GRANT ALL ON $dbname.* TO \"$dbuser\"@\"localhost\" IDENTIFIED BY \"'$dbpassword'\" \\; >> /tmp/setup.mysql \n",
                  "mysql -u root --password=\"$dbrootpassword\" < /tmp/setup.mysql \n",
                  "$(mysql $dbname -u root --password=\"$dbrootpassword\" >/dev/null 2>&1 </dev/null); (( $? != 0 )) \n",
                  "cd /root \n",
                  "systemctl restart php-fpm.service \n",
                  "systemctl restart nginx.service \n",
                  "echo \\<?php >  /usr/share/nginx/html/test.php \n",
                  "echo \\$conn=mysql_connect\\(\"'127.0.0.1'\", \"'$dbuser'\", \"'$dbpassword'\"\\)\\; >>  /usr/share/nginx/html/test.php \n",
                  "echo if \\(\\$conn\\){ >>  /usr/share/nginx/html/test.php \n",
                  "echo   echo \\\"LNMP platform connect to mysql is successful\\!\\\"\\; >>  /usr/share/nginx/html/test.php \n",
                  "echo   }else{  >>  /usr/share/nginx/html/test.php \n",
                  "echo echo \\\"LNMP platform connect to mysql is failed\\!\\\"\\;  >>  /usr/share/nginx/html/test.php \n",
                  "echo }  >>  /usr/share/nginx/html/test.php \n",
                  "echo  phpinfo\\(\\)\\;  >>  /usr/share/nginx/html/test.php \n",
                  "echo \\?\\>  >>  /usr/share/nginx/html/test.php \n",
                  "ros-notify -d '{\"data\" : \"Install LNMP stack.\"}'\n"
                ]
              ]
            }
          ]
        },
        "SecurityGroupId": {
          "Ref": "SecurityGroup"
        },
        "VSwitchId": {
          "Ref": "VSwitch"
        },
        "ImageId": {
          "Ref": "ImageId"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SystemDiskCategory": {
          "Ref": "SystemDiskCategory"
        },
        "Password": {
          "Ref": "InstancePassword"
        }
      }
    },
    "WebServerWaitCondition": {
      "Type": "ALIYUN::ROS::WaitCondition",
      "Properties": {
        "Timeout": 1800,
        "Count": 1,
        "Handle": {
          "Ref": "WebServerConditionHandle"
        }
      },
      "DependsOn": "WebServer"
    },
    "Vpc": {
      "Type": "ALIYUN::ECS::VPC",
      "Properties": {
        "CidrBlock": "192.168.0.0/16"
      }
    },
    "SecurityGroup": {
      "Type": "ALIYUN::ECS::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "PortRange": "-1/-1",
            "Priority": 1,
            "SourceCidrIp": "0.0.0.0/0",
            "IpProtocol": "all",
            "NicType": "intranet"
          }
        ],
        "SecurityGroupEgress": [
          {
            "PortRange": "-1/-1",
            "Priority": 1,
            "IpProtocol": "all",
            "DestCidrIp": "0.0.0.0/0",
            "NicType": "intranet"
          }
        ]
      }
    }
  },
  "Outputs": {
    "NginxWebsiteURL": {
      "Description": "URL for newly created Nginx home page.",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "WebServer",
                "PublicIp"
              ]
            },
            ":80/test.php"
          ]
        ]
      }
    }
  }
}