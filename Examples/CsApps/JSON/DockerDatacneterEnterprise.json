{
  "ROSTemplateFormatVersion": "2015-09-01",
  "Description": "DDC for Aliyun",
  "Mappings": {
    "FunctionMap": {
      "InstallDocker": {
        "Function": "sed -i 's/Acquire::http::Proxy/#Acquire::http::Proxy/' /etc/apt/apt.conf\napt-get update\napt-get install -y apt-transport-https linux-image-extra-virtual curl unzip jq\napt-get install -y software-properties-common\ncurl -fsSL \"${docker_ee_url}/ubuntu/gpg\" | sudo apt-key add -\nadd-apt-repository \"deb [arch=amd64] $docker_ee_url/ubuntu $(lsb_release -cs) stable-$EngineVersion\"\napt-get update\napt-get -y install docker-ee\nsed -i \"s#ExecStart=/usr/bin/dockerd#ExecStart=/usr/bin/dockerd --registry-mirror=https://6udu7vtl.mirror.aliyuncs.com --log-driver=json-file --log-opt max-size=100m --log-opt max-file=10#g\" /lib/systemd/system/docker.service\nsystemctl enable docker.service\nsystemctl restart docker.service\nusermod -aG docker $USER\n"
      }
    }
  },
  "Conditions": {
    "CreateSlaveUcp": {
      "Fn::Not": {
        "Fn::Equals": [
          0,
          {
            "Ref": "ControllerSlaveMaxAmount"
          }
        ]
      }
    }
  },
  "Parameters": {
    "DockerEEURL": {
      "Type": "String",
      "Description": "User's Docker EE installation URL",
      "Label": "Docker EE URL"
    },
    "UCPVersion": {
      "Type": "String",
      "Description": "Docker Universal Control Plane Version",
      "Label": "Docker UCP Version",
      "Default": "3.1.7",
      "AllowedValues": [
        "latest",
        "3.1.7",
        "3.0.2"
      ]
    },
    "DTRVersion": {
      "Type": "String",
      "Description": "Docker Trusted Registry Version",
      "Label": "Docker DTR Version",
      "Default": "2.6.6",
      "AllowedValues": [
        "latest",
        "2.6.6",
        "2.5.3"
      ]
    },
    "EngineVersion": {
      "Type": "String",
      "Description": "Docker Enterprise Container Engine Version",
      "Label": "Docker Engine Version",
      "Default": "18.09",
      "AllowedValues": [
        "",
        "18.09",
        "17.06"
      ]
    },
    "UCPAdminUserName": {
      "Type": "String",
      "Description": "The username of Universal Control Plane (UCP) administrator, default is 'admin'",
      "Label": "UCP Admin Username",
      "Default": "admin"
    },
    "UCPAdminPassword": {
      "Type": "String",
      "Description": "The administrator password of Universal Control Plane (UCP). The password is a string of 8 to 30 characters and must contain uppercase/lowercase letters, numbers.",
      "ConstraintDescription": "Consist of alphanumeric characters",
      "Label": "UCP Admin Password",
      "MaxLength": "41",
      "MinLength": "8",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "NoEcho": true,
      "Confirm": true
    },
    "InstancePassword": {
      "Type": "String",
      "Description": "The root password of ECS instance. The password is a string of 8 to 30 characters and must contain uppercase/lowercase letters, numbers.",
      "ConstraintDescription": "Consist of alphanumeric characters",
      "Label": "Instance Password",
      "MaxLength": "41",
      "MinLength": "8",
      "AllowedPattern": "[a-zA-Z0-9-\\(\\)\\`\\~\\!@\\#\\$%\\^&\\*-+=\\|\\{\\}\\[\\]\\:\\;\\\u2018\\,\\.\\?\\/]*",
      "NoEcho": true,
      "Confirm": true
    },
    "ControllerInstanceType": {
      "Type": "String",
      "Description": "The ECS instance type, <a href='#/product/cn-beijing/list/typeList' target='_blank'>View instance types</a>",
      "Label": "Controller ECS Instance Type",
      "Default": "ecs.c5.large",
      "AllowedValues": [
        "ecs.c5.large",
        "ecs.c5.xlarge",
        "ecs.g5.large",
        "ecs.g5.xlarge"
      ]
    },
    "ControllerSystemDiskCategory": {
      "Type": "String",
      "Description": "Controller system disk category, default is 'cloud_ssd'",
      "Label": "Controller System Disk Category",
      "Default": "cloud_ssd",
      "AllowedValues": [
        "cloud",
        "cloud_efficiency",
        "cloud_ssd"
      ]
    },
    "ControllerSlaveMaxAmount": {
      "Type": "Number",
      "Description": "Select an additional Swarm Manager node (0, 2 or 4) to make the cluster, includes 1, 3 or 5 Swarm Manager nodes, constitute a highly available deployment",
      "Label": "Number of slave controller",
      "Default": 0,
      "AllowedValues": [
        0,
        2,
        4
      ]
    },
    "ControllerImageId": {
      "Type": "String",
      "Description": "Image Id, represents the image resource to startup one ECS instance, <a href='#/product/cn-beijing/list/imageList' target='_blank'>View image resources</a>",
      "Label": "Controller ECS Image Id",
      "Default": "ubuntu"
    },
    "DTRInstanceType": {
      "Type": "String",
      "Description": "The ECS instance type, <a href='#/product/cn-beijing/list/typeList' target='_blank'>View instance types</a>",
      "Label": "DTR ECS Instance Type",
      "Default": "ecs.c5.large",
      "AllowedValues": [
        "ecs.c5.large",
        "ecs.c5.xlarge",
        "ecs.g5.large",
        "ecs.g5.xlarge"
      ]
    },
    "DTRSystemDiskCategory": {
      "Type": "String",
      "Description": "DTR system disk category, default is 'cloud_ssd'",
      "Label": "DTR System Disk Category",
      "Default": "cloud_ssd",
      "AllowedValues": [
        "cloud",
        "cloud_efficiency",
        "cloud_ssd"
      ]
    },
    "DTRMaxAmount": {
      "Type": "Number",
      "Description": "The number of Docker Trusted Registry (DTR) nodes.",
      "Label": "Number of DTR",
      "Default": 1
    },
    "DTRImageId": {
      "Type": "String",
      "Description": "Image Id, represents the image resource to startup one ECS instance, <a href='#/product/cn-beijing/list/imageList' target='_blank'>View image resources</a>",
      "Label": "DTR ECS Image Id",
      "Default": "ubuntu"
    },
    "WorkerInstanceType": {
      "Type": "String",
      "Description": "The ECS instance type, <a href='#/product/cn-beijing/list/typeList' target='_blank'>View instance types</a>",
      "Label": "Worker ECS Instance Type",
      "Default": "ecs.c5.large",
      "AllowedValues": [
        "ecs.c5.large",
        "ecs.c5.xlarge",
        "ecs.g5.large",
        "ecs.g5.xlarge"
      ]
    },
    "WorkerSystemDiskCategory": {
      "Type": "String",
      "Description": "Worker system disk category, default is 'cloud_ssd'",
      "Label": "Worker System Disk Category",
      "Default": "cloud_ssd",
      "AllowedValues": [
        "cloud",
        "cloud_efficiency",
        "cloud_ssd"
      ]
    },
    "WorkerMaxAmount": {
      "Type": "Number",
      "Description": "The number of Swarm Worker nodes.",
      "Label": "Number of Worker",
      "Default": 1
    },
    "WorkerImageId": {
      "Type": "String",
      "Description": "Image Id, represents the image resource to startup one ECS instance, <a href='#/product/cn-beijing/list/imageList' target='_blank'>View image resources</a>",
      "Label": "Worker ECS Image Id",
      "Default": "ubuntu"
    }
  },
  "Resources": {
    "DTRConditionHandle": {
      "Type": "ALIYUN::ROS::WaitConditionHandle"
    },
    "ControllerSlaveWaitCondition": {
      "Type": "ALIYUN::ROS::WaitCondition",
      "Condition": "CreateSlaveUcp",
      "Properties": {
        "Handle": {
          "Ref": "ControllerSlaveConditionHandle"
        },
        "Timeout": 4000,
        "Count": {
          "Ref": "ControllerSlaveMaxAmount"
        }
      },
      "DependsOn": "ControllerSlave"
    },
    "SNatEntry": {
      "Type": "ALIYUN::ECS::SNatEntry",
      "Properties": {
        "SNatIp": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAtt": [
                "NatGateway",
                "BandwidthPackageIps"
              ]
            }
          ]
        },
        "SourceVSwitchId": {
          "Fn::GetAtt": [
            "PubSubnet",
            "VSwitchId"
          ]
        },
        "SNatTableId": {
          "Fn::GetAtt": [
            "NatGateway",
            "SNatTableId"
          ]
        }
      },
      "DependsOn": "ControllerLoadBalancer"
    },
    "ControllerSlave": {
      "Type": "ALIYUN::ECS::InstanceGroup",
      "Condition": "CreateSlaveUcp",
      "Properties": {
        "IoOptimized": "optimized",
        "ImageId": {
          "Ref": "ControllerImageId"
        },
        "SecurityGroupId": {
          "Fn::GetAtt": [
            "DefaultSecurityGroup",
            "SecurityGroupId"
          ]
        },
        "Password": {
          "Ref": "InstancePassword"
        },
        "MinAmount": {
          "Ref": "ControllerSlaveMaxAmount"
        },
        "AllocatePublicIP": "false",
        "SystemDiskCategory": {
          "Ref": "ControllerSystemDiskCategory"
        },
        "UserData": {
          "Fn::Replace": [
            {
              "ros-notify": {
                "Fn::GetAtt": [
                  "ControllerSlaveConditionHandle",
                  "CurlCli"
                ]
              }
            },
            {
              "Fn::Join": [
                "",
                [
                  "#!/bin/sh\n",
                  "EngineVersion='",
                  {
                    "Ref": "EngineVersion"
                  },
                  "'\n",
                  "tokens='",
                  {
                    "Fn::GetAtt": [
                      "ControllerWaitCondition",
                      "Data"
                    ]
                  },
                  "'\n",
                  "ucp_controller_ip='",
                  {
                    "Fn::GetAtt": [
                      "Controller",
                      "PrivateIp"
                    ]
                  },
                  "'\n",
                  "docker_ee_url='",
                  {
                    "Ref": "DockerEEURL"
                  },
                  "'\n",
                  "ip_addr=`ip addr | grep eth0 | grep -o '[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}/' | cut -d '/' -f 1`\n",
                  "host_name=`hostname`\n",
                  {
                    "Fn::FindInMap": [
                      "FunctionMap",
                      "InstallDocker",
                      "Function"
                    ]
                  },
                  "echo $tokens > /tmp/tokens\n",
                  "token=`echo \"$tokens\" | jq '.tokens'[1] | xargs echo `\n",
                  "echo $token > /tmp/manager_token \n",
                  "cmd=\"ros-notify -d '{\\\"data\" : \\\"$token\\\"}' | tee /tmp/test_tee\"\n",
                  "eval $cmd\n",
                  "echo $? > /tmp/eval_res\n",
                  "docker swarm join --token=$token ${ucp_controller_ip}:2377\n",
                  "echo $token > /tmp/fin_manager_token\n"
                ]
              ]
            }
          ]
        },
        "MaxAmount": {
          "Ref": "ControllerSlaveMaxAmount"
        },
        "VSwitchId": {
          "Ref": "PubSubnet"
        },
        "VpcId": {
          "Ref": "Vpc"
        },
        "InstanceType": {
          "Ref": "ControllerInstanceType"
        }
      },
      "DependsOn": "DTRWaitCondition"
    },
    "ControllerLoadBalancerListener443": {
      "Type": "ALIYUN::SLB::Listener",
      "Properties": {
        "Persistence": {
          "StickySession": "on",
          "PersistenceTimeout": 600
        },
        "HealthCheck": {
          "Timeout": "2",
          "Port": "443",
          "Interval": "5",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "4"
        },
        "LoadBalancerId": {
          "Ref": "ControllerLoadBalancer"
        },
        "BackendServerPort": "443",
        "Protocol": "tcp",
        "Bandwidth": -1,
        "ListenerPort": "443"
      },
      "DependsOn": "ControllerLoadBalancer"
    },
    "ControllerSLBAttachment": {
      "Type": "ALIYUN::SLB::BackendServerAttachment",
      "Properties": {
        "BackendServerList": [
          {
            "Fn::GetAtt": [
              "Controller",
              "InstanceId"
            ]
          }
        ],
        "LoadBalancerId": {
          "Ref": "ControllerLoadBalancer"
        }
      }
    },
    "WorkerLoadBalancer": {
      "Type": "ALIYUN::SLB::LoadBalancer",
      "Properties": {
        "LoadBalancerName": "WorkerLoadBalancer",
        "AddressType": "internet"
      }
    },
    "DTRWaitCondition": {
      "Type": "ALIYUN::ROS::WaitCondition",
      "Properties": {
        "Handle": {
          "Ref": "DTRConditionHandle"
        },
        "Timeout": 1800,
        "Count": {
          "Ref": "DTRMaxAmount"
        }
      },
      "DependsOn": "DTRNode"
    },
    "ControllerConditionHandle": {
      "Type": "ALIYUN::ROS::WaitConditionHandle"
    },
    "WorkerConditionHandle": {
      "Type": "ALIYUN::ROS::WaitConditionHandle"
    },
    "ForwardEntry": {
      "Type": "ALIYUN::ECS::ForwardEntry",
      "Properties": {
        "IpProtocol": "TCP",
        "ExternalIp": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAtt": [
                "NatGateway",
                "BandwidthPackageIps"
              ]
            }
          ]
        },
        "ForwardTableId": {
          "Fn::GetAtt": [
            "NatGateway",
            "ForwardTableId"
          ]
        },
        "ExternalPort": "22",
        "InternalPort": "22",
        "InternalIp": {
          "Fn::GetAtt": [
            "JumpHost",
            "PrivateIp"
          ]
        }
      }
    },
    "ControllerSlaveConditionHandle": {
      "Type": "ALIYUN::ROS::WaitConditionHandle",
      "Condition": "CreateSlaveUcp"
    },
    "DTRLoadBalancerListener": {
      "Type": "ALIYUN::SLB::Listener",
      "Properties": {
        "Persistence": {
          "StickySession": "on",
          "PersistenceTimeout": 600
        },
        "HealthCheck": {
          "Timeout": "2",
          "Port": "443",
          "Interval": "5",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "4"
        },
        "LoadBalancerId": {
          "Ref": "DTRLoadBalancer"
        },
        "BackendServerPort": "443",
        "Protocol": "tcp",
        "Bandwidth": -1,
        "ListenerPort": "443"
      },
      "DependsOn": "DTRLoadBalancer"
    },
    "DTRNode": {
      "Type": "ALIYUN::ECS::InstanceGroup",
      "Properties": {
        "IoOptimized": "optimized",
        "ImageId": {
          "Ref": "DTRImageId"
        },
        "SecurityGroupId": {
          "Fn::GetAtt": [
            "DefaultSecurityGroup",
            "SecurityGroupId"
          ]
        },
        "Password": {
          "Ref": "InstancePassword"
        },
        "MinAmount": {
          "Ref": "DTRMaxAmount"
        },
        "AllocatePublicIP": "false",
        "SystemDiskCategory": {
          "Ref": "DTRSystemDiskCategory"
        },
        "UserData": {
          "Fn::Replace": [
            {
              "ros-notify": {
                "Fn::GetAtt": [
                  "DTRConditionHandle",
                  "CurlCli"
                ]
              }
            },
            {
              "Fn::Join": [
                "",
                [
                  "#!/bin/sh\n",
                  "EngineVersion='",
                  {
                    "Ref": "EngineVersion"
                  },
                  "'\n",
                  "ucp_admin_username='",
                  {
                    "Ref": "UCPAdminUserName"
                  },
                  "'\n",
                  "ucp_admin_password='",
                  {
                    "Ref": "UCPAdminPassword"
                  },
                  "'\n",
                  "tokens='",
                  {
                    "Fn::GetAtt": [
                      "ControllerWaitCondition",
                      "Data"
                    ]
                  },
                  "'\n",
                  "ucp_controller_ip='",
                  {
                    "Fn::GetAtt": [
                      "Controller",
                      "PrivateIp"
                    ]
                  },
                  "'\n",
                  "controller_slb_ip='",
                  {
                    "Fn::GetAtt": [
                      "ControllerLoadBalancer",
                      "IpAddress"
                    ]
                  },
                  "'\n",
                  "dtr_slb_ip='",
                  {
                    "Fn::GetAtt": [
                      "DTRLoadBalancer",
                      "IpAddress"
                    ]
                  },
                  "'\n",
                  "docker_ee_url='",
                  {
                    "Ref": "DockerEEURL"
                  },
                  "'\n",
                  "ip_addr=`ip addr | grep eth0 | grep -o '[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}/' | cut -d '/' -f 1`\n",
                  "host_name=`hostname`\n",
                  {
                    "Fn::FindInMap": [
                      "FunctionMap",
                      "InstallDocker",
                      "Function"
                    ]
                  },
                  "echo $tokens > /tmp/tokens\n",
                  "token=`echo \"$tokens\" | jq '.tokens'[0] | xargs echo `\n",
                  "echo $token > /tmp/worker_token \n",
                  "docker swarm join --token=$token ${ucp_controller_ip}:2377\n",
                  "sleep 30\n",
                  "docker container run -i --rm docker/dtr:",
                  {
                    "Ref": "DTRVersion"
                  },
                  " install --ucp-url https://$controller_slb_ip:443 --ucp-node $host_name --dtr-external-url https://$dtr_slb_ip:443 --ucp-username $ucp_admin_username --ucp-password $ucp_admin_password --ucp-insecure-tls | tee -a /tmp/dtr_install_log\n",
                  "echo $token > /tmp/fin_worker_token\n",
                  "if [ -z $token ]; then\n    data=\"Join-Token fetch failed\"\nelse\n    data=\"Join-Token token success\"\nfi\n",
                  "cmd=\"ros-notify -d '{\\\"data\\\" : \\\"$data\\\"}'\"\n",
                  "echo $cmd > /tmp/cmd_line\n",
                  "eval $cmd\n",
                  "echo $? > /tmp/eval_res\n"
                ]
              ]
            }
          ]
        },
        "MaxAmount": {
          "Ref": "DTRMaxAmount"
        },
        "VSwitchId": {
          "Ref": "PubSubnet"
        },
        "VpcId": {
          "Ref": "Vpc"
        },
        "InstanceType": {
          "Ref": "DTRInstanceType"
        }
      },
      "DependsOn": "Controller"
    },
    "WorkerNode": {
      "Type": "ALIYUN::ECS::InstanceGroup",
      "Properties": {
        "IoOptimized": "optimized",
        "ImageId": {
          "Ref": "WorkerImageId"
        },
        "SecurityGroupId": {
          "Fn::GetAtt": [
            "DefaultSecurityGroup",
            "SecurityGroupId"
          ]
        },
        "Password": {
          "Ref": "InstancePassword"
        },
        "MinAmount": {
          "Ref": "WorkerMaxAmount"
        },
        "AllocatePublicIP": "false",
        "SystemDiskCategory": {
          "Ref": "WorkerSystemDiskCategory"
        },
        "UserData": {
          "Fn::Replace": [
            {
              "ros-notify": {
                "Fn::GetAtt": [
                  "WorkerConditionHandle",
                  "CurlCli"
                ]
              }
            },
            {
              "Fn::Join": [
                "",
                [
                  "#!/bin/sh\n",
                  "EngineVersion='",
                  {
                    "Ref": "EngineVersion"
                  },
                  "'\n",
                  "tokens='",
                  {
                    "Fn::GetAtt": [
                      "ControllerWaitCondition",
                      "Data"
                    ]
                  },
                  "'\n",
                  "ucp_controller_ip='",
                  {
                    "Fn::GetAtt": [
                      "Controller",
                      "PrivateIp"
                    ]
                  },
                  "'\n",
                  "docker_ee_url='",
                  {
                    "Ref": "DockerEEURL"
                  },
                  "'\n",
                  "ip_addr=`ip addr | grep eth0 | grep -o '[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}/' | cut -d '/' -f 1`\n",
                  "host_name=`hostname`\n",
                  {
                    "Fn::FindInMap": [
                      "FunctionMap",
                      "InstallDocker",
                      "Function"
                    ]
                  },
                  "echo $tokens > /tmp/tokens\n",
                  "token=`echo \"$tokens\" | jq '.tokens'[0] | xargs echo `\n",
                  "echo $token > /tmp/worker_token \n",
                  "cmd=\"ros-notify -d '{\\\"data\\\" : \\\"$token\\\"}'\"\n",
                  "eval $cmd\n",
                  "docker swarm join --token=$token ${ucp_controller_ip}:2377\n",
                  "echo $token > /tmp/fin_worker_token\n"
                ]
              ]
            }
          ]
        },
        "MaxAmount": {
          "Ref": "WorkerMaxAmount"
        },
        "VSwitchId": {
          "Ref": "PubSubnet"
        },
        "VpcId": {
          "Ref": "Vpc"
        },
        "InstanceType": {
          "Ref": "WorkerInstanceType"
        }
      },
      "DependsOn": "Controller"
    },
    "NatGateway": {
      "Type": "ALIYUN::ECS::NatGateway",
      "Properties": {
        "Spec": "Small",
        "NatGatewayName": "NatGateway",
        "BandwidthPackage": [
          {
            "IpCount": 2,
            "Bandwidth": 5
          }
        ],
        "VSwitchId": {
          "Ref": "PubSubnet"
        },
        "VpcId": {
          "Fn::GetAtt": [
            "Vpc",
            "VpcId"
          ]
        }
      }
    },
    "DTRLoadBalancer": {
      "Type": "ALIYUN::SLB::LoadBalancer",
      "Properties": {
        "LoadBalancerName": "DTRLoadBalancer",
        "AddressType": "internet"
      }
    },
    "Vpc": {
      "Type": "ALIYUN::ECS::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/8"
      }
    },
    "ControllerLoadBalancer": {
      "Type": "ALIYUN::SLB::LoadBalancer",
      "Properties": {
        "LoadBalancerName": "ControllerLoadBalancer",
        "AddressType": "internet"
      },
      "DependsOn": "DTRLoadBalancer"
    },
    "ControllerWaitCondition": {
      "Type": "ALIYUN::ROS::WaitCondition",
      "Properties": {
        "Handle": {
          "Ref": "ControllerConditionHandle"
        },
        "Timeout": 1500,
        "Count": 1
      },
      "DependsOn": "Controller"
    },
    "JumpHost": {
      "Type": "ALIYUN::ECS::Instance",
      "Properties": {
        "IoOptimized": "optimized",
        "ImageId": {
          "Ref": "WorkerImageId"
        },
        "SecurityGroupId": {
          "Fn::GetAtt": [
            "DefaultSecurityGroup",
            "SecurityGroupId"
          ]
        },
        "Password": {
          "Ref": "InstancePassword"
        },
        "AllocatePublicIP": "false",
        "SystemDiskCategory": "cloud_efficiency",
        "VSwitchId": {
          "Ref": "PubSubnet"
        },
        "VpcId": {
          "Ref": "Vpc"
        },
        "InstanceType": {
          "Ref": "ControllerInstanceType"
        }
      },
      "DependsOn": "WorkerNode"
    },
    "WorkerWaitCondition": {
      "Type": "ALIYUN::ROS::WaitCondition",
      "Properties": {
        "Handle": {
          "Ref": "WorkerConditionHandle"
        },
        "Timeout": 4000,
        "Count": {
          "Ref": "WorkerMaxAmount"
        }
      },
      "DependsOn": "WorkerNode"
    },
    "ControllerSlaveSLBAttachment": {
      "Type": "ALIYUN::SLB::BackendServerAttachment",
      "Condition": "CreateSlaveUcp",
      "Properties": {
        "BackendServerList": {
          "Fn::GetAtt": [
            "ControllerSlave",
            "InstanceIds"
          ]
        },
        "LoadBalancerId": {
          "Ref": "ControllerLoadBalancer"
        }
      }
    },
    "Controller": {
      "Type": "ALIYUN::ECS::Instance",
      "Properties": {
        "IoOptimized": "optimized",
        "ImageId": {
          "Ref": "ControllerImageId"
        },
        "SecurityGroupId": {
          "Fn::GetAtt": [
            "DefaultSecurityGroup",
            "SecurityGroupId"
          ]
        },
        "Password": {
          "Ref": "InstancePassword"
        },
        "AllocatePublicIP": "false",
        "SystemDiskCategory": {
          "Ref": "ControllerSystemDiskCategory"
        },
        "UserData": {
          "Fn::Replace": [
            {
              "ros-notify": {
                "Fn::GetAtt": [
                  "ControllerConditionHandle",
                  "CurlCli"
                ]
              }
            },
            {
              "Fn::Join": [
                "",
                [
                  "#!/bin/sh\n",
                  "EngineVersion='",
                  {
                    "Ref": "EngineVersion"
                  },
                  "'\n",
                  "ucp_admin_username='",
                  {
                    "Ref": "UCPAdminUserName"
                  },
                  "'\n",
                  "ucp_admin_password='",
                  {
                    "Ref": "UCPAdminPassword"
                  },
                  "'\n",
                  "controller_slb_ip='",
                  {
                    "Fn::GetAtt": [
                      "ControllerLoadBalancer",
                      "IpAddress"
                    ]
                  },
                  "'\n",
                  "docker_ee_url='",
                  {
                    "Ref": "DockerEEURL"
                  },
                  "'\n",
                  "ip_addr=`ip addr | grep eth0 | grep -o '[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}/' | cut -d '/' -f 1`\n",
                  "host_name=`hostname`\n",
                  {
                    "Fn::FindInMap": [
                      "FunctionMap",
                      "InstallDocker",
                      "Function"
                    ]
                  },
                  "docker container run --rm -i --name ucp -v /var/run/docker.sock:/var/run/docker.sock docker/ucp:",
                  {
                    "Ref": "UCPVersion"
                  },
                  " install --host-address $ip_addr --admin-username $ucp_admin_username --admin-password $ucp_admin_password --san $controller_slb_ip | tee -a /tmp/ucp_install_log\n",
                  "worker_token=`docker swarm join-token -q worker`\n",
                  "manager_token=`docker swarm join-token -q manager`\n",
                  "echo $worker_token, $manager_token > /tmp/tokens\n",
                  "cmd=\"ros-notify -d '{\\\"id\\\" : \\\"tokens\\\", \\\"data\\\" : [\\\"$worker_token\\\", \\\"$manager_token\\\"]}'\"\n",
                  "eval $cmd\n"
                ]
              ]
            }
          ]
        },
        "VSwitchId": {
          "Ref": "PubSubnet"
        },
        "VpcId": {
          "Ref": "Vpc"
        },
        "InstanceType": {
          "Ref": "ControllerInstanceType"
        }
      },
      "DependsOn": "SNatEntry"
    },
    "ControllerLoadBalancerListener2377": {
      "Type": "ALIYUN::SLB::Listener",
      "Properties": {
        "Persistence": {
          "StickySession": "on",
          "PersistenceTimeout": 600
        },
        "HealthCheck": {
          "Timeout": "2",
          "Port": "2377",
          "Interval": "5",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "4"
        },
        "LoadBalancerId": {
          "Ref": "ControllerLoadBalancer"
        },
        "BackendServerPort": "2377",
        "Protocol": "tcp",
        "Bandwidth": -1,
        "ListenerPort": "2377"
      },
      "DependsOn": "ControllerLoadBalancer"
    },
    "DTRSLBAttachment": {
      "Type": "ALIYUN::SLB::BackendServerAttachment",
      "Properties": {
        "BackendServerList": {
          "Fn::GetAtt": [
            "DTRNode",
            "InstanceIds"
          ]
        },
        "LoadBalancerId": {
          "Ref": "DTRLoadBalancer"
        }
      }
    },
    "PubSubnet": {
      "Type": "ALIYUN::ECS::VSwitch",
      "Properties": {
        "CidrBlock": "10.18.0.0/24",
        "ZoneId": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": {
                "Ref": "ALIYUN::Region"
              }
            }
          ]
        },
        "VpcId": {
          "Fn::GetAtt": [
            "Vpc",
            "VpcId"
          ]
        }
      }
    },
    "WorkerSLBAttachment": {
      "Type": "ALIYUN::SLB::BackendServerAttachment",
      "Properties": {
        "BackendServerList": {
          "Fn::GetAtt": [
            "WorkerNode",
            "InstanceIds"
          ]
        },
        "LoadBalancerId": {
          "Ref": "WorkerLoadBalancer"
        }
      }
    },
    "DefaultSecurityGroup": {
      "Type": "ALIYUN::ECS::SecurityGroup",
      "Properties": {
        "Description": "DDC default security group",
        "SecurityGroupIngress": [
          {
            "SourceCidrIp": "0.0.0.0/0",
            "IpProtocol": "tcp",
            "NicType": "intranet",
            "PortRange": "22/22"
          },
          {
            "SourceCidrIp": "0.0.0.0/0",
            "IpProtocol": "tcp",
            "NicType": "intranet",
            "PortRange": "443/443"
          },
          {
            "SourceCidrIp": "0.0.0.0/0",
            "IpProtocol": "tcp",
            "NicType": "intranet",
            "PortRange": "80/80"
          },
          {
            "SourceCidrIp": "0.0.0.0/0",
            "IpProtocol": "tcp",
            "NicType": "intranet",
            "PortRange": "2377/2377"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "all",
            "DestCidrIp": "0.0.0.0/0",
            "NicType": "intranet",
            "PortRange": "-1/-1",
            "Priority": 1
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    }
  },
  "Outputs": {
    "GetJoinTokenResult": {
      "Description": "Get join-token result",
      "Value": {
        "Fn::GetAtt": [
          "DTRWaitCondition",
          "Data"
        ]
      }
    },
    "ControllerLoadBalancerIp": {
      "Description": "Public ip for controller service",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "ControllerLoadBalancer",
                "IpAddress"
              ]
            },
            ":443"
          ]
        ]
      }
    },
    "JumpHostIp": {
      "Description": "Jump host IP",
      "Value": {
        "Fn::Select": [
          "1",
          {
            "Fn::GetAtt": [
              "NatGateway",
              "BandwidthPackageIps"
            ]
          }
        ]
      }
    },
    "DTRLoadBalancerIp": {
      "Description": "Public ip for DTR service",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "DTRLoadBalancer",
                "IpAddress"
              ]
            },
            ":443"
          ]
        ]
      }
    },
    "WorkerLoadBalancerIp": {
      "Description": "Public ip for Worker service",
      "Value": {
        "Fn::GetAtt": [
          "WorkerLoadBalancer",
          "IpAddress"
        ]
      }
    }
  }
}