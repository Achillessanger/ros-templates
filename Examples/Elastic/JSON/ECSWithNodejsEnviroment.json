{
  "ROSTemplateFormatVersion": "2015-09-01",
  "Description": "This template show how to deploy a Node.js environment and do a test based on a new ECS instance. ***WARNING***, this template only supports CentOS.",
  "Parameters": {
    "IoOptimized": {
      "Type": "String",
      "Description": "The 'optimized' instance can provide better IO performance. Support 'none' and 'optimized' only, default is 'optimized'.",
      "Label": "Io Optimized",
      "Default": "optimized",
      "AllowedValues": [
        "none",
        "optimized"
      ]
    },
    "ImageId": {
      "Type": "String",
      "Description": "Image Id, represents the image resource to startup one ECS instance, <a href='#/product/cn-beijing/list/imageList' target='_blank'>View image resources</a>",
      "Label": "ECS Image Id",
      "Default": "centos_7"
    },
    "VpcName": {
      "Type": "String",
      "Description": "Name of VPC",
      "ConstraintDescription": "[2, 128] English or Chinese characters",
      "Label": "Vpc Name",
      "MaxLength": 128,
      "MinLength": 2
    },
    "VpcCidrBlock": {
      "Type": "String",
      "Description": "The IP address range of the VPC in the CIDR block form. You can use the following IP address ranges and their subnets:\n10.0.0.0/8\n172.16.0.0/12 (Default)\n192.168.0.0/16",
      "Label": "Vpc Cidr Block",
      "Default": "192.168.0.0/16",
      "AllowedValues": [
        "10.0.0.0/8",
        "172.16.0.0/12",
        "192.168.0.0/16"
      ]
    },
    "InstancePassword": {
      "Type": "String",
      "Description": "The root password of ECS instance. The password is a string of 8 to 41 characters and must contain uppercase/lowercase letters, numbers.",
      "ConstraintDescription": "Consist of 8 to 30 alphanumeric.",
      "Label": "ECS Instance Password",
      "MaxLength": "30",
      "MinLength": "8",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "NoEcho": true,
      "Confirm": true
    },
    "ZoneId": {
      "Type": "String",
      "Description": "Ecs Available Zone Id, <a href='#/product/cn-beijing/list/zoneList' target='_blank'>View zoneid info</a>",
      "Label": "ECS Zone Id"
    },
    "SystemDiskCategory": {
      "Type": "String",
      "Description": "System disk category: average cloud disk(cloud), efficient cloud disk(cloud_efficiency) or SSD cloud disk(cloud_ssd)",
      "Label": "Instance System Disk Category",
      "Default": "cloud_ssd",
      "AllowedValues": [
        "cloud",
        "cloud_efficiency",
        "cloud_ssd"
      ]
    },
    "NodejsUrl": {
      "Type": "String",
      "Description": "The official download path of .tar.gz",
      "Label": "Node js Url",
      "Default": "https://nodejs.org/dist/v6.9.5/node-v6.9.5-linux-x64.tar.xz"
    },
    "InstanceName": {
      "Type": "String",
      "Description": "The name of ECS instance",
      "Label": "ECS Instance Name",
      "Default": "ecsinstance"
    },
    "VSwitchCidrBlock": {
      "Type": "String",
      "Description": "Cidr Block of created VSwitch",
      "Label": "VSwitch Cidr Block",
      "Default": "192.168.1.0/24"
    },
    "InstanceType": {
      "Type": "String",
      "Description": "The ECS instance type, <a href='#/product/cn-beijing/list/typeList' target='_blank'>View instance types</a>",
      "Label": "ECS Instance Type",
      "Default": "ecs.c5.large",
      "AllowedValues": [
        "ecs.c5.large",
        "ecs.g5.large",
        "ecs.c5.xlarge",
        "ecs.g5.xlarge"
      ]
    }
  },
  "Resources": {
    "VSwitch": {
      "Type": "ALIYUN::ECS::VSwitch",
      "Properties": {
        "CidrBlock": {
          "Ref": "VSwitchCidrBlock"
        },
        "ZoneId": {
          "Ref": "ZoneId"
        },
        "VpcId": {
          "Fn::GetAtt": [
            "Vpc",
            "VpcId"
          ]
        }
      }
    },
    "Vpc": {
      "Type": "ALIYUN::ECS::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VpcCidrBlock"
        },
        "VpcName": {
          "Ref": "VpcName"
        }
      }
    },
    "SecurityGroup": {
      "Type": "ALIYUN::ECS::SecurityGroup",
      "Properties": {
        "SecurityGroupIngress": [
          {
            "SourceCidrIp": "0.0.0.0/0",
            "IpProtocol": "all",
            "NicType": "internet",
            "PortRange": "-1/-1",
            "Priority": 1
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "all",
            "DestCidrIp": "0.0.0.0/0",
            "NicType": "internet",
            "PortRange": "-1/-1",
            "Priority": 1
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "WebServer": {
      "Type": "ALIYUN::ECS::Instance",
      "Properties": {
        "IoOptimized": {
          "Ref": "IoOptimized"
        },
        "ImageId": {
          "Ref": "ImageId"
        },
        "SecurityGroupId": {
          "Ref": "SecurityGroup"
        },
        "Password": {
          "Ref": "InstancePassword"
        },
        "SystemDiskCategory": {
          "Ref": "SystemDiskCategory"
        },
        "UserData": {
          "Fn::Replace": [
            {
              "ros-notify": {
                "Fn::GetAtt": [
                  "WebServerConditionHandle",
                  "CurlCli"
                ]
              }
            },
            {
              "Fn::Join": [
                "",
                [
                  "#!/bin/bash \n",
                  "NodejsUrl=",
                  {
                    "Ref": "NodejsUrl"
                  },
                  "\n",
                  "cd /root \n",
                  "yum -y install aria2 \n",
                  "aria2c $NodejsUrl \n",
                  "tar xvf node-v6.9.5-linux-x64.tar.xz \n",
                  "ln -s /root/node-v6.9.5-linux-x64/bin/node /usr/local/bin/node \n",
                  "ln -s /root/node-v6.9.5-linux-x64/bin/npm /usr/local/bin/npm \n",
                  " \n",
                  "yum -y install git \n",
                  "git clone https://github.com/cnpm/nvm.git ~/.nvm && cd ~/.nvm && git checkout `git describe --abbrev=0 --tags` \n",
                  " \n",
                  "echo \". ~/.nvm/nvm.sh\" >> /etc/profile \n",
                  "source /etc/profile \n",
                  " \n",
                  "nvm list-remote \n",
                  "nvm install v6.9.5 \n",
                  "nvm install v7.4.0 \n",
                  " \n",
                  "nvm ls \n",
                  "nvm use v7.4.0 \n",
                  " \n",
                  "cd /root \n",
                  "touch example.js \n",
                  "Hostname=`hostname` \n",
                  "Port=3000 \n",
                  "echo \"const http = require('http');\" >> example.js \n",
                  "echo \"const hostname = '$Hostname';\" >> example.js \n",
                  "echo \"const port = '$Port';\" >> example.js \n",
                  "echo \"const server = http.createServer((req, res) => {\"  >> example.js \n",
                  "echo \"res.statusCode = 200;\" >> example.js \n",
                  "echo \"res.setHeader('Content-Type', 'text/plain');\" >> example.js \n",
                  "echo \"res.end('Hello World');\" >> example.js \n",
                  "echo \"});\" >> example.js \n",
                  "echo \"server.listen(port, hostname, () => {\" >> example.js \n",
                  "echo \"});\"  >> example.js \n",
                  " \n",
                  "node /root/example.js & \n",
                  "ros-notify -d '{\"data\" : \"Install Node.js.\"}'\n"
                ]
              ]
            }
          ]
        },
        "VSwitchId": {
          "Ref": "VSwitch"
        },
        "InstanceName": {
          "Ref": "InstanceName"
        },
        "VpcId": {
          "Fn::GetAtt": [
            "Vpc",
            "VpcId"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        }
      }
    },
    "WebServerGroupWaitCondition": {
      "Type": "ALIYUN::ROS::WaitCondition",
      "Properties": {
        "Handle": {
          "Ref": "WebServerConditionHandle"
        },
        "Timeout": 3600,
        "Count": 1
      },
      "DependsOn": "WebServer"
    },
    "WebServerConditionHandle": {
      "Type": "ALIYUN::ROS::WaitConditionHandle"
    }
  },
  "Outputs": {
    "WebsiteURL": {
      "Description": "URL for newly created testing Node.js program.",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "WebServer",
                "PublicIp"
              ]
            },
            ":3000"
          ]
        ]
      }
    }
  }
}