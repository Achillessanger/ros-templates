{
  "ROSTemplateFormatVersion": "2015-09-01",
  "Description": "Creates ECS instance and installs TensorFlow",
  "Conditions": {
    "gpu_disable": {
      "Fn::Equals": [
        "None",
        {
          "Ref": "GPUNodeZoneId"
        }
      ]
    }
  },
  "Parameters": {
    "ImageId": {
      "Type": "String",
      "Description": "Image Id, represents the image resource to startup one ECS instance, <a href='#/product/cn-beijing/list/imageList' target='_blank'>View image resources</a>",
      "Label": "ECS Image Id",
      "Default": "ubuntu_16"
    },
    "InstanceType": {
      "Type": "String",
      "Description": "Select CPU or GPU type.'ecs.gn5-c8g1.2xlarge' is General purpose gpu computing.",
      "Label": "ECS Instance Type",
      "Default": "ecs.c5.large",
      "AllowedValues": [
        "ecs.c5.large",
        "ecs.g5.large",
        "ecs.c5.xlarge",
        "ecs.g5.xlarge",
        "ecs.gn5-c8g1.2xlarge"
      ]
    },
    "LoginPassword": {
      "Type": "String",
      "Description": "ECS Login Password",
      "Label": "ECS Login Password",
      "MaxLength": 41,
      "MinLength": 8,
      "AllowedPattern": "[a-zA-Z0-9-\\(\\)\\`\\~\\!@\\#\\$%\\^&\\*-+=\\|\\{\\}\\[\\]\\:\\;\\â€˜\\,\\.\\?\\/]*",
      "NoEcho": true,
      "Confirm": true
    },
    "PublicIP": {
      "Type": "Boolean",
      "Description": "Allocate Public IP or Not",
      "Label": "Allocate Public IP or Not",
      "Default": false
    },
    "NumOfNodes": {
      "Type": "Number",
      "Description": "The number of ECS instances will be created.",
      "Label": "Number of Nodes",
      "Default": "1"
    },
    "GPUNodeZoneId": {
      "Type": "String",
      "Description": "Specify zone Id that provides the GPU instance while InstanceType is specified the GPU type.",
      "Label": "Zone of GPU Node",
      "Default": "None"
    }
  },
  "Resources": {
    "vswitch": {
      "Type": "ALIYUN::ECS::VSwitch",
      "Properties": {
        "VSwitchName": "tensorflow_vswitch",
        "VpcId": {
          "Ref": "vpc"
        },
        "ZoneId": {
          "Fn::If": [
            "gpu_disable",
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::GetAZs": {
                    "Ref": "ALIYUN::Region"
                  }
                }
              ]
            },
            {
              "Ref": "GPUNodeZoneId"
            }
          ]
        },
        "CidrBlock": "192.168.0.0/16"
      }
    },
    "tensorflow_nodes_cloudinit_wait_cond_handle": {
      "Type": "ALIYUN::ROS::WaitConditionHandle"
    },
    "tensorflow_nodes_cloudinit_wait_cond": {
      "Type": "ALIYUN::ROS::WaitCondition",
      "Properties": {
        "Timeout": 1800,
        "Count": {
          "Ref": "NumOfNodes"
        },
        "Handle": {
          "Ref": "tensorflow_nodes_cloudinit_wait_cond_handle"
        }
      }
    },
    "tensorflow_nodes": {
      "Type": "ALIYUN::ECS::InstanceGroup",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "SecurityGroupId": {
          "Ref": "sg"
        },
        "VSwitchId": {
          "Ref": "vswitch"
        },
        "ImageId": {
          "Ref": "ImageId"
        },
        "AllocatePublicIP": {
          "Ref": "PublicIP"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "Password": {
          "Ref": "LoginPassword"
        },
        "InternetMaxBandwidthOut": 50,
        "UserData": {
          "Fn::Replace": [
            {
              "ros-notify": {
                "Fn::GetAtt": [
                  "tensorflow_nodes_cloudinit_wait_cond_handle",
                  "CurlCli"
                ]
              }
            },
            {
              "Fn::Join": [
                "",
                [
                  "#!/bin/sh\n",
                  "gpu_enable=",
                  {
                    "Fn::If": [
                      "gpu_disable",
                      "no",
                      "yes"
                    ]
                  },
                  "\n",
                  "apt-get install -y python-pip python-dev\n",
                  "pip install tensorflow\n",
                  "if [ $gpu_enable = 'yes' ]; then\n",
                  "    pip install tensorflow-gpu\n",
                  "    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-repo-ubuntu1604_8.0.61-1_amd64.deb\n",
                  "    dpkg -i cuda-repo-ubuntu1604_8.0.61-1_amd64.deb\n",
                  "    apt-get install -y libgd3\n",
                  "    apt-get update --fix-missing\n",
                  "    apt-get install -y cuda\n",
                  "    echo \"deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list\n",
                  "    apt-get update\n",
                  "    apt-get install -y --no-install-recommends libcudnn7=7.0.1.13-1+cuda8.0\n",
                  "    apt-get install -y --no-install-recommends libcudnn7-dev=7.0.1.13-1+cuda8.0\n",
                  "    cd /usr/local/cuda/lib64\n",
                  "    ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.1 libcudnn.so\n",
                  "    ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.1 libcudnn.so.6\n",
                  "    cp /usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a .\n",
                  "    cd -\n",
                  "    echo export CUDA_HOME=/usr/local/cuda > /root/.bash_profile\n",
                  "    echo 'export LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:$CUDA_HOME/lib64:/usr/local/cuda/extras/CUPTI/lib64\"' >> /root/.bash_profile\n",
                  "    echo 'export PATH=\"$CUDA_HOME/bin:$PATH\"' >>  /root/.bash_profile\n",
                  "    source /root/.bash_profile\n",
                  "    export LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64\"\n",
                  "    export CUDA_HOME=/usr/local/cuda \n",
                  "fi\n",
                  "tensorboard --logdir=/tmp/tf_logs &\n",
                  "ros-notify \n"
                ]
              ]
            }
          ]
        },
        "MaxAmount": {
          "Ref": "NumOfNodes"
        },
        "MinAmount": {
          "Ref": "NumOfNodes"
        }
      }
    },
    "sg": {
      "Type": "ALIYUN::ECS::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "SecurityGroupName": "tensorflow_sg",
        "SecurityGroupIngress": [
          {
            "PortRange": "22/22",
            "Priority": 1,
            "SourceCidrIp": "0.0.0.0/0",
            "IpProtocol": "tcp",
            "NicType": "intranet"
          },
          {
            "PortRange": "6006/6006",
            "Priority": 1,
            "SourceCidrIp": "0.0.0.0/0",
            "IpProtocol": "tcp",
            "NicType": "intranet"
          }
        ],
        "SecurityGroupEgress": [
          {
            "PortRange": "-1/-1",
            "Priority": 1,
            "IpProtocol": "all",
            "DestCidrIp": "0.0.0.0/0",
            "NicType": "intranet"
          }
        ]
      }
    },
    "vpc": {
      "Type": "ALIYUN::ECS::VPC",
      "Properties": {
        "CidrBlock": "192.168.0.0/16",
        "VpcName": "tensorflow_vpc"
      }
    }
  },
  "Outputs": {
    "tensorflow_nodes_ips": {
      "Description": "Public IP address list of created ecs instance.",
      "Value": {
        "Fn::GetAtt": [
          "tensorflow_nodes",
          "PublicIps"
        ]
      }
    }
  }
}